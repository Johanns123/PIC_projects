

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Wed Nov 23 17:54:43 2022

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    30                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1,group=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    53                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    54                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    55                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    56                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    57   000000                     
    58                           ; Version 2.40
    59                           ; Generated 17/11/2021 GMT
    60                           ; 
    61                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    62                           ; All rights reserved.
    63                           ; 
    64                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    65                           ; 
    66                           ; Redistribution and use in source and binary forms, with or without modification, are
    67                           ; permitted provided that the following conditions are met:
    68                           ; 
    69                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    70                           ;        conditions and the following disclaimer.
    71                           ; 
    72                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    73                           ;        of conditions and the following disclaimer in the documentation and/or other
    74                           ;        materials provided with the distribution. Publication is not required when
    75                           ;        this file is used in an embedded application.
    76                           ; 
    77                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    78                           ;        software without specific prior written permission.
    79                           ; 
    80                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    81                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    82                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    83                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    84                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    85                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    86                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    87                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    88                           ; 
    89                           ; 
    90                           ; Code-generator required, PIC18F4520 Definitions
    91                           ; 
    92                           ; SFR Addresses
    93   000000                     
    94                           	psect	idataCOMRAM
    95   0010AC                     __pidataCOMRAM:
    96                           	callstack 0
    97                           
    98                           ;initializer for _conv7seg
    99   0010AC  3F                 	db	63
   100   0010AD  06                 	db	6
   101   0010AE  5B                 	db	91
   102   0010AF  4F                 	db	79
   103   0010B0  66                 	db	102
   104   0010B1  6D                 	db	109
   105   0010B2  7D                 	db	125
   106   0010B3  07                 	db	7
   107   0010B4  7F                 	db	127
   108   0010B5  6F                 	db	111
   109   0010B6  77                 	db	119
   110   0010B7  7C                 	db	124
   111   0010B8  39                 	db	57
   112   0010B9  5E                 	db	94
   113   0010BA  79                 	db	121
   114   0010BB  71                 	db	113
   115   0010BC  00                 	db	0
   116                           
   117                           ;initializer for _linha1
   118   0010BD  41                 	db	65
   119   0010BE  42                 	db	66
   120   0010BF  43                 	db	67
   121   0010C0  44                 	db	68
   122   0010C1  45                 	db	69
   123   0010C2  46                 	db	70
   124   0010C3  47                 	db	71
   125   0010C4  48                 	db	72
   126   0010C5  49                 	db	73
   127   0010C6  4A                 	db	74
   128   0010C7  00                 	db	0
   129   0010C8  00                 	db	0
   130   0010C9  00                 	db	0
   131   0010CA  00                 	db	0
   132   0010CB  00                 	db	0
   133   0010CC  00                 	db	0
   134   0010CD  00                 	db	0
   135                           
   136                           ;initializer for f_timers@counter3
   137   0010CE  0001               	dw	1
   138                           
   139                           ;initializer for f_timers@counter2
   140   0010D0  0001               	dw	1
   141                           
   142                           ;initializer for f_timers@counter1
   143   0010D2  0001               	dw	1
   144                           
   145                           ;initializer for f_timers@counter0
   146   0010D4  0001               	dw	1
   147                           
   148                           ;initializer for read_keyb@m_dado_RB5
   149   0010D6  01                 	db	1
   150                           
   151                           ;initializer for read_keyb@m_dado_RB4
   152   0010D7  01                 	db	1
   153                           
   154                           ;initializer for read_keyb@m_dado_RB3
   155   0010D8  01                 	db	1
   156                           
   157                           ;initializer for _duty_LCD4
   158   0010D9  20                 	db	32
   159                           
   160                           ;initializer for _duty_LCD3
   161   0010DA  20                 	db	32
   162                           
   163                           ;initializer for _duty_LCD2
   164   0010DB  20                 	db	32
   165                           
   166                           ;initializer for _duty_LCD1
   167   0010DC  20                 	db	32
   168                           
   169                           	psect	idataBANK0
   170   001228                     __pidataBANK0:
   171                           	callstack 0
   172                           
   173                           ;initializer for _linha2
   174   001228  41                 	db	65
   175   001229  42                 	db	66
   176   00122A  43                 	db	67
   177   00122B  44                 	db	68
   178   00122C  45                 	db	69
   179   00122D  46                 	db	70
   180   00122E  47                 	db	71
   181   00122F  48                 	db	72
   182   001230  49                 	db	73
   183   001231  4A                 	db	74
   184   001232  00                 	db	0
   185   001233  00                 	db	0
   186   001234  00                 	db	0
   187   001235  00                 	db	0
   188   001236  00                 	db	0
   189   001237  00                 	db	0
   190   001238  00                 	db	0
   191   000000                     _INTCON2	set	4081
   192                           
   193                           	psect	nvCOMRAM
   194   000066                     __pnvCOMRAM:
   195                           	callstack 0
   196   000066                     _temporizador2:
   197                           	callstack 0
   198   000066                     	ds	2
   199   000068                     _temporizador1:
   200                           	callstack 0
   201   000068                     	ds	2
   202   000000                     _INTCON3	set	4080
   203   000000                     _INTCON	set	4082
   204   000000                     _LATA	set	3977
   205   000000                     _GO	set	32273
   206   000000                     _TMR0IE	set	32661
   207   000000                     _PEIE	set	32662
   208   000000                     _GIE	set	32663
   209   000000                     _INT2IE	set	32644
   210   000000                     _INT2IF	set	32641
   211   000000                     _INT1IE	set	32643
   212   000000                     _INT0IE	set	32660
   213   000000                     _INT0IF	set	32657
   214   000000                     _LATA5	set	31821
   215   000000                     _LATA4	set	31820
   216   000000                     _LATA3	set	31819
   217   000000                     _PORTB	set	3969
   218   000000                     _PORTD	set	3971
   219   000000                     _CCP1CON	set	4029
   220   000000                     _T2CON	set	4042
   221   000000                     _PORTEbits	set	3972
   222   000000                     _LATA2	set	31818
   223   000000                     _TMR0	set	4054
   224   000000                     _PR2	set	4043
   225   000000                     _IPEN	set	32391
   226   000000                     _TMR0IF	set	32658
   227   000000                     _ADCON2	set	4032
   228   000000                     _ADCON1	set	4033
   229   000000                     _ADCON0	set	4034
   230   000000                     _CCPR1L	set	4030
   231   000000                     _LATD	set	3980
   232   000000                     _LATB	set	3978
   233   000000                     _TRISA	set	3986
   234   000000                     _TRISE	set	3990
   235   000000                     _TRISD	set	3989
   236   000000                     _TRISC	set	3988
   237   000000                     _TRISB	set	3987
   238   000000                     _ADIE	set	31982
   239   000000                     _ADIF	set	31990
   240   000000                     _INT1IF	set	32640
   241   000000                     _T0CON	set	4053
   242   000000                     _ADRESH	set	4036
   243                           
   244                           	psect	smallconst
   245   000600                     __psmallconst:
   246                           	callstack 0
   247   000600  00                 	db	0
   248   000601                     STR_1:
   249   000601  54                 	db	84	;'T'
   250   000602  72                 	db	114	;'r'
   251   000603  61                 	db	97	;'a'
   252   000604  62                 	db	98	;'b'
   253   000605  30                 	db	48	;'0'
   254   000606  31                 	db	49	;'1'
   255   000607  20                 	db	32
   256   000608  4A                 	db	74	;'J'
   257   000609  6F                 	db	111	;'o'
   258   00060A  68                 	db	104	;'h'
   259   00060B  61                 	db	97	;'a'
   260   00060C  6E                 	db	110	;'n'
   261   00060D  6E                 	db	110	;'n'
   262   00060E  00                 	db	0
   263   00060F                     STR_2:
   264   00060F  50                 	db	80	;'P'
   265   000610  57                 	db	87	;'W'
   266   000611  4D                 	db	77	;'M'
   267   000612  3A                 	db	58	;':'
   268   000613  00                 	db	0
   269   000614  00                 	db	0	; dummy byte at the end
   270   000000                     
   271                           ; #config settings
   272                           
   273                           	psect	cinit
   274   000F64                     __pcinit:
   275                           	callstack 0
   276   000F64                     start_initialization:
   277                           	callstack 0
   278   000F64                     __initialization:
   279                           	callstack 0
   280                           
   281                           ; Initialize objects allocated to BANK0 (17 bytes)
   282                           ; load TBLPTR registers with __pidataBANK0
   283   000F64  0E28               	movlw	low __pidataBANK0
   284   000F66  6EF6               	movwf	tblptrl,c
   285   000F68  0E12               	movlw	high __pidataBANK0
   286   000F6A  6EF7               	movwf	tblptrh,c
   287   000F6C  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   288   000F6E  6EF8               	movwf	tblptru,c
   289   000F70  EE00  F080         	lfsr	0,__pdataBANK0
   290   000F74  EE10 F011          	lfsr	1,17
   291   000F78                     copy_data0:
   292   000F78  0009               	tblrd		*+
   293   000F7A  CFF5 FFEE          	movff	tablat,postinc0
   294   000F7E  50E5               	movf	postdec1,w,c
   295   000F80  50E1               	movf	fsr1l,w,c
   296   000F82  E1FA               	bnz	copy_data0
   297                           
   298                           ; Initialize objects allocated to COMRAM (49 bytes)
   299                           ; load TBLPTR registers with __pidataCOMRAM
   300   000F84  0EAC               	movlw	low __pidataCOMRAM
   301   000F86  6EF6               	movwf	tblptrl,c
   302   000F88  0E10               	movlw	high __pidataCOMRAM
   303   000F8A  6EF7               	movwf	tblptrh,c
   304   000F8C  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   305   000F8E  6EF8               	movwf	tblptru,c
   306   000F90  EE00  F001         	lfsr	0,__pdataCOMRAM
   307   000F94  EE10 F031          	lfsr	1,49
   308   000F98                     copy_data1:
   309   000F98  0009               	tblrd		*+
   310   000F9A  CFF5 FFEE          	movff	tablat,postinc0
   311   000F9E  50E5               	movf	postdec1,w,c
   312   000FA0  50E1               	movf	fsr1l,w,c
   313   000FA2  E1FA               	bnz	copy_data1
   314                           
   315                           ; Clear objects allocated to COMRAM (28 bytes)
   316   000FA4  EE00  F032         	lfsr	0,__pbssCOMRAM
   317   000FA8  0E1C               	movlw	28
   318   000FAA                     clear_0:
   319   000FAA  6AEE               	clrf	postinc0,c
   320   000FAC  06E8               	decf	wreg,f,c
   321   000FAE  E1FD               	bnz	clear_0
   322   000FB0                     end_of_initialization:
   323                           	callstack 0
   324   000FB0                     __end_of__initialization:
   325                           	callstack 0
   326   000FB0  906A               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   327   000FB2  926A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   328   000FB4  0E00               	movlw	low (__Lmediumconst shr (0+16))
   329   000FB6  6EF8               	movwf	tblptru,c
   330   000FB8  0100               	movlb	0
   331   000FBA  EF1D  F009         	goto	_main	;jump to C main() function
   332                           
   333                           	psect	bssCOMRAM
   334   000032                     __pbssCOMRAM:
   335                           	callstack 0
   336   000032                     _duty_teclado:
   337                           	callstack 0
   338   000032                     	ds	8
   339   00003A                     f_int2@duty_normalized:
   340                           	callstack 0
   341   00003A                     	ds	2
   342   00003C                     _AD_data:
   343                           	callstack 0
   344   00003C                     	ds	2
   345   00003E                     ADC_maq@estado:
   346                           	callstack 0
   347   00003E                     	ds	1
   348   00003F                     mux_display@estado:
   349                           	callstack 0
   350   00003F                     	ds	1
   351   000040                     _estado_sequencia02:
   352                           	callstack 0
   353   000040                     	ds	1
   354   000041                     _estado_sequencia01:
   355                           	callstack 0
   356   000041                     	ds	1
   357   000042                     read_keyboard@dado:
   358                           	callstack 0
   359   000042                     	ds	1
   360   000043                     _memoria_dado:
   361                           	callstack 0
   362   000043                     	ds	1
   363   000044                     _dado4:
   364                           	callstack 0
   365   000044                     	ds	1
   366   000045                     _dado3:
   367                           	callstack 0
   368   000045                     	ds	1
   369   000046                     _dado2:
   370                           	callstack 0
   371   000046                     	ds	1
   372   000047                     _dado1:
   373                           	callstack 0
   374   000047                     	ds	1
   375   000048                     _i:
   376                           	callstack 0
   377   000048                     	ds	1
   378   000049                     _duty_AD:
   379                           	callstack 0
   380   000049                     	ds	1
   381   00004A                     _display4:
   382                           	callstack 0
   383   00004A                     	ds	1
   384   00004B                     _display3:
   385                           	callstack 0
   386   00004B                     	ds	1
   387   00004C                     _display2:
   388                           	callstack 0
   389   00004C                     	ds	1
   390   00004D                     _display1:
   391                           	callstack 0
   392   00004D                     	ds	1
   393                           
   394                           	psect	dataCOMRAM
   395   000001                     __pdataCOMRAM:
   396                           	callstack 0
   397   000001                     _conv7seg:
   398                           	callstack 0
   399   000001                     	ds	17
   400   000012                     _linha1:
   401                           	callstack 0
   402   000012                     	ds	17
   403   000023                     f_timers@counter3:
   404                           	callstack 0
   405   000023                     	ds	2
   406   000025                     f_timers@counter2:
   407                           	callstack 0
   408   000025                     	ds	2
   409   000027                     f_timers@counter1:
   410                           	callstack 0
   411   000027                     	ds	2
   412   000029                     f_timers@counter0:
   413                           	callstack 0
   414   000029                     	ds	2
   415   00002B                     read_keyb@m_dado_RB5:
   416                           	callstack 0
   417   00002B                     	ds	1
   418   00002C                     read_keyb@m_dado_RB4:
   419                           	callstack 0
   420   00002C                     	ds	1
   421   00002D                     read_keyb@m_dado_RB3:
   422                           	callstack 0
   423   00002D                     	ds	1
   424   00002E                     _duty_LCD4:
   425                           	callstack 0
   426   00002E                     	ds	1
   427   00002F                     _duty_LCD3:
   428                           	callstack 0
   429   00002F                     	ds	1
   430   000030                     _duty_LCD2:
   431                           	callstack 0
   432   000030                     	ds	1
   433   000031                     _duty_LCD1:
   434                           	callstack 0
   435   000031                     	ds	1
   436                           
   437                           	psect	dataBANK0
   438   000080                     __pdataBANK0:
   439                           	callstack 0
   440   000080                     _linha2:
   441                           	callstack 0
   442   000080                     	ds	17
   443                           
   444                           	psect	cstackBANK0
   445   000091                     __pcstackBANK0:
   446                           	callstack 0
   447   000091                     lcd_wr@val:
   448                           	callstack 0
   449                           
   450                           ; 1 bytes @ 0x0
   451   000091                     	ds	1
   452   000092                     lcd_cmd@val:
   453                           	callstack 0
   454   000092                     lcd_dat@val:
   455                           	callstack 0
   456                           
   457                           ; 1 bytes @ 0x1
   458   000092                     	ds	1
   459   000093                     ??_lcd_init:
   460   000093                     lcd_str@str:
   461                           	callstack 0
   462                           
   463                           ; 2 bytes @ 0x2
   464   000093                     	ds	2
   465   000095                     ??_lcd_str:
   466                           
   467                           ; 1 bytes @ 0x4
   468   000095                     	ds	2
   469   000097                     lcd_str@i:
   470                           	callstack 0
   471                           
   472                           ; 1 bytes @ 0x6
   473   000097                     	ds	1
   474   000098                     
   475                           ; 1 bytes @ 0x7
   476                           
   477                           	psect	cstackCOMRAM
   478   00004E                     __pcstackCOMRAM:
   479                           	callstack 0
   480   00004E                     ??_mux_display:
   481   00004E                     ?___wmul:
   482                           	callstack 0
   483   00004E                     ?___lwmod:
   484                           	callstack 0
   485   00004E                     select_channel@channel:
   486                           	callstack 0
   487   00004E                     i2lcd_wr@val:
   488                           	callstack 0
   489   00004E                     f_pwm@duty:
   490                           	callstack 0
   491   00004E                     ler_teclado@i:
   492                           	callstack 0
   493   00004E                     ___wmul@multiplier:
   494                           	callstack 0
   495   00004E                     ___lwmod@dividend:
   496                           	callstack 0
   497                           
   498                           ; 2 bytes @ 0x0
   499   00004E                     	ds	1
   500   00004F                     ??_ADC_maq:
   501   00004F                     i2lcd_cmd@val:
   502                           	callstack 0
   503   00004F                     i2lcd_dat@val:
   504                           	callstack 0
   505                           
   506                           ; 1 bytes @ 0x1
   507   00004F                     	ds	1
   508   000050                     ??_f_pwm:
   509   000050                     ler_teclado@i_379:
   510                           	callstack 0
   511   000050                     ___wmul@multiplicand:
   512                           	callstack 0
   513   000050                     ___lwmod@divisor:
   514                           	callstack 0
   515   000050                     i2lcd_str@str:
   516                           	callstack 0
   517                           
   518                           ; 2 bytes @ 0x2
   519   000050                     	ds	2
   520   000052                     ??i2_lcd_str:
   521   000052                     ___lwmod@counter:
   522                           	callstack 0
   523   000052                     ler_teclado@i_380:
   524                           	callstack 0
   525   000052                     ___wmul@product:
   526                           	callstack 0
   527                           
   528                           ; 2 bytes @ 0x4
   529   000052                     	ds	1
   530   000053                     ?___lwdiv:
   531                           	callstack 0
   532   000053                     ___lwdiv@dividend:
   533                           	callstack 0
   534                           
   535                           ; 2 bytes @ 0x5
   536   000053                     	ds	1
   537   000054                     ??_f_int2:
   538   000054                     ler_teclado@saida:
   539                           	callstack 0
   540   000054                     i2lcd_str@i:
   541                           	callstack 0
   542                           
   543                           ; 1 bytes @ 0x6
   544   000054                     	ds	1
   545   000055                     ler_teclado@entrada:
   546                           	callstack 0
   547   000055                     ___lwdiv@divisor:
   548                           	callstack 0
   549                           
   550                           ; 2 bytes @ 0x7
   551   000055                     	ds	1
   552   000056                     ??_read_keyboard:
   553                           
   554                           ; 1 bytes @ 0x8
   555   000056                     	ds	1
   556   000057                     ___lwdiv@quotient:
   557                           	callstack 0
   558                           
   559                           ; 2 bytes @ 0x9
   560   000057                     	ds	2
   561   000059                     ___lwdiv@counter:
   562                           	callstack 0
   563                           
   564                           ; 1 bytes @ 0xB
   565   000059                     	ds	1
   566   00005A                     ??_Read_AD:
   567   00005A                     read_keyb@dado_RB3:
   568                           	callstack 0
   569                           
   570                           ; 1 bytes @ 0xC
   571   00005A                     	ds	1
   572   00005B                     read_keyb@dado_RB4:
   573                           	callstack 0
   574                           
   575                           ; 1 bytes @ 0xD
   576   00005B                     	ds	1
   577   00005C                     read_keyb@dado_RB5:
   578                           	callstack 0
   579   00005C                     Read_AD@data:
   580                           	callstack 0
   581                           
   582                           ; 2 bytes @ 0xE
   583   00005C                     	ds	1
   584   00005D                     read_keyb@dado:
   585                           	callstack 0
   586                           
   587                           ; 1 bytes @ 0xF
   588   00005D                     	ds	1
   589   00005E                     ??_f_interrupt_high:
   590                           
   591                           ; 1 bytes @ 0x10
   592   00005E                     	ds	8
   593                           
   594 ;;
   595 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   596 ;;
   597 ;; *************** function _main *****************
   598 ;; Defined at:
   599 ;;		line 28 in file "main.c"
   600 ;; Parameters:    Size  Location     Type
   601 ;;		None
   602 ;; Auto vars:     Size  Location     Type
   603 ;;		None
   604 ;; Return value:  Size  Location     Type
   605 ;;                  2  174[None  ] int 
   606 ;; Registers used:
   607 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   608 ;; Tracked objects:
   609 ;;		On entry : 0/0
   610 ;;		On exit  : 0/0
   611 ;;		Unchanged: 0/0
   612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   613 ;;      Params:         0       0       0       0       0       0       0
   614 ;;      Locals:         0       0       0       0       0       0       0
   615 ;;      Temps:          0       0       0       0       0       0       0
   616 ;;      Totals:         0       0       0       0       0       0       0
   617 ;;Total ram usage:        0 bytes
   618 ;; Hardware stack levels required when called: 10
   619 ;; This function calls:
   620 ;;		_loop
   621 ;;		_setup
   622 ;; This function is called by:
   623 ;;		Startup code after reset
   624 ;; This function uses a non-reentrant model
   625 ;;
   626                           
   627                           	psect	text0
   628   00123A                     __ptext0:
   629                           	callstack 0
   630   00123A                     _main:
   631                           	callstack 21
   632   00123A                     
   633                           ;main.c: 31:    setup();
   634   00123A  ECE5  F006         	call	_setup	;wreg free
   635   00123E                     l2106:
   636   00123E  EC4C  F009         	call	_loop	;wreg free
   637   001242  EF1F  F009         	goto	l2106
   638   001246  EF07  F000         	goto	start
   639   00124A                     __end_of_main:
   640                           	callstack 0
   641                           
   642 ;; *************** function _setup *****************
   643 ;; Defined at:
   644 ;;		line 16 in file "IO.c"
   645 ;; Parameters:    Size  Location     Type
   646 ;;		None
   647 ;; Auto vars:     Size  Location     Type
   648 ;;		None
   649 ;; Return value:  Size  Location     Type
   650 ;;                  1    wreg      void 
   651 ;; Registers used:
   652 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   653 ;; Tracked objects:
   654 ;;		On entry : 0/0
   655 ;;		On exit  : 0/0
   656 ;;		Unchanged: 0/0
   657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   658 ;;      Params:         0       0       0       0       0       0       0
   659 ;;      Locals:         0       0       0       0       0       0       0
   660 ;;      Temps:          0       0       0       0       0       0       0
   661 ;;      Totals:         0       0       0       0       0       0       0
   662 ;;Total ram usage:        0 bytes
   663 ;; Hardware stack levels used: 1
   664 ;; Hardware stack levels required when called: 9
   665 ;; This function calls:
   666 ;;		_AD_init
   667 ;;		_disable_interrupts
   668 ;;		_enable_interrupts
   669 ;;		_interrupt_init
   670 ;;		_lcd_cmd
   671 ;;		_lcd_init
   672 ;;		_lcd_str
   673 ;;		_setup_io
   674 ;;		_start_AD_conversion
   675 ;; This function is called by:
   676 ;;		_main
   677 ;; This function uses a non-reentrant model
   678 ;;
   679                           
   680                           	psect	text1
   681   000DCA                     __ptext1:
   682                           	callstack 0
   683   000DCA                     _setup:
   684                           	callstack 21
   685   000DCA                     
   686                           ;IO.c: 18:     disable_interrupts();
   687   000DCA  EC3D  F009         	call	_disable_interrupts	;wreg free
   688   000DCE                     
   689                           ;IO.c: 19:     setup_io();
   690   000DCE  ECD4  F008         	call	_setup_io	;wreg free
   691   000DD2                     
   692                           ;IO.c: 20:     interrupt_init();
   693   000DD2  EC07  F009         	call	_interrupt_init	;wreg free
   694   000DD6                     
   695                           ;IO.c: 21:     T2CON = 0b00000101;
   696   000DD6  0E05               	movlw	5
   697   000DD8  6ECA               	movwf	202,c	;volatile
   698   000DDA                     
   699                           ;IO.c: 22:     PR2 = 255;
   700   000DDA  68CB               	setf	203,c	;volatile
   701   000DDC                     
   702                           ;IO.c: 23:     CCP1CON = 0b00001100;
   703   000DDC  0E0C               	movlw	12
   704   000DDE  6EBD               	movwf	189,c	;volatile
   705   000DE0                     
   706                           ;IO.c: 24:     AD_init();
   707   000DE0  EC25  F009         	call	_AD_init	;wreg free
   708   000DE4                     
   709                           ;IO.c: 25:     LATA2 = 1, LATA3 = 1, LATA4 = 1, LATA5 = 1;
   710   000DE4  8489               	bsf	3977,2,c	;volatile
   711   000DE6  8689               	bsf	3977,3,c	;volatile
   712   000DE8  8889               	bsf	3977,4,c	;volatile
   713   000DEA  8A89               	bsf	3977,5,c	;volatile
   714                           
   715                           ;IO.c: 26:     temporizador1 = 500;
   716   000DEC  0E01               	movlw	1
   717   000DEE  6E69               	movwf	(_temporizador1+1)^0,c
   718   000DF0  0EF4               	movlw	244
   719   000DF2  6E68               	movwf	_temporizador1^0,c
   720                           
   721                           ;IO.c: 27:     temporizador2 = 300;
   722   000DF4  0E01               	movlw	1
   723   000DF6  6E67               	movwf	(_temporizador2+1)^0,c
   724   000DF8  0E2C               	movlw	44
   725   000DFA  6E66               	movwf	_temporizador2^0,c
   726   000DFC                     
   727                           ;IO.c: 28:     lcd_init();
   728   000DFC  EC1E  F007         	call	_lcd_init	;wreg free
   729                           
   730                           ;IO.c: 29:     start_AD_conversion();
   731   000E00  EC48  F009         	call	_start_AD_conversion	;wreg free
   732   000E04                     
   733                           ;IO.c: 30:     display1 = 0;
   734   000E04  0E00               	movlw	0
   735   000E06  6E4D               	movwf	_display1^0,c
   736   000E08                     
   737                           ;IO.c: 31:     display2 = 0;
   738   000E08  0E00               	movlw	0
   739   000E0A  6E4C               	movwf	_display2^0,c
   740   000E0C                     
   741                           ;IO.c: 32:     display3 = 0;
   742   000E0C  0E00               	movlw	0
   743   000E0E  6E4B               	movwf	_display3^0,c
   744   000E10                     
   745                           ;IO.c: 33:     display4 = 0;
   746   000E10  0E00               	movlw	0
   747   000E12  6E4A               	movwf	_display4^0,c
   748   000E14                     
   749                           ;IO.c: 34:     lcd_str("Trab01 Johann");
   750   000E14  0E01               	movlw	low STR_1
   751   000E16  0100               	movlb	0	; () banked
   752   000E18  6F93               	movwf	lcd_str@str& (0+255),b
   753   000E1A  0E06               	movlw	high STR_1
   754   000E1C  6F94               	movwf	(lcd_str@str+1)& (0+255),b
   755   000E1E  ECDF  F007         	call	_lcd_str	;wreg free
   756   000E22                     
   757                           ;IO.c: 35:     lcd_cmd(0xC0);
   758   000E22  0EC0               	movlw	192
   759   000E24  ECAE  F008         	call	_lcd_cmd
   760   000E28                     
   761                           ;IO.c: 36:     lcd_str("PWM:");
   762   000E28  0E0F               	movlw	low STR_2
   763   000E2A  0100               	movlb	0	; () banked
   764   000E2C  6F93               	movwf	lcd_str@str& (0+255),b
   765   000E2E  0E06               	movlw	high STR_2
   766   000E30  6F94               	movwf	(lcd_str@str+1)& (0+255),b
   767   000E32  ECDF  F007         	call	_lcd_str	;wreg free
   768   000E36                     
   769                           ;IO.c: 37:     enable_interrupts();
   770   000E36  EC38  F009         	call	_enable_interrupts	;wreg free
   771   000E3A  0012               	return		;funcret
   772   000E3C                     __end_of_setup:
   773                           	callstack 0
   774                           
   775 ;; *************** function _start_AD_conversion *****************
   776 ;; Defined at:
   777 ;;		line 19 in file "ADC.c"
   778 ;; Parameters:    Size  Location     Type
   779 ;;		None
   780 ;; Auto vars:     Size  Location     Type
   781 ;;		None
   782 ;; Return value:  Size  Location     Type
   783 ;;                  1    wreg      void 
   784 ;; Registers used:
   785 ;;		None
   786 ;; Tracked objects:
   787 ;;		On entry : 0/0
   788 ;;		On exit  : 0/0
   789 ;;		Unchanged: 0/0
   790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   791 ;;      Params:         0       0       0       0       0       0       0
   792 ;;      Locals:         0       0       0       0       0       0       0
   793 ;;      Temps:          0       0       0       0       0       0       0
   794 ;;      Totals:         0       0       0       0       0       0       0
   795 ;;Total ram usage:        0 bytes
   796 ;; Hardware stack levels used: 1
   797 ;; Hardware stack levels required when called: 6
   798 ;; This function calls:
   799 ;;		Nothing
   800 ;; This function is called by:
   801 ;;		_setup
   802 ;; This function uses a non-reentrant model
   803 ;;
   804                           
   805                           	psect	text2
   806   001290                     __ptext2:
   807                           	callstack 0
   808   001290                     _start_AD_conversion:
   809                           	callstack 23
   810   001290                     
   811                           ;ADC.c: 21:     GO = 1;
   812   001290  82C2               	bsf	4034,1,c	;volatile
   813   001292  0012               	return		;funcret
   814   001294                     __end_of_start_AD_conversion:
   815                           	callstack 0
   816                           
   817 ;; *************** function _setup_io *****************
   818 ;; Defined at:
   819 ;;		line 42 in file "IO.c"
   820 ;; Parameters:    Size  Location     Type
   821 ;;		None
   822 ;; Auto vars:     Size  Location     Type
   823 ;;		None
   824 ;; Return value:  Size  Location     Type
   825 ;;                  1    wreg      void 
   826 ;; Registers used:
   827 ;;		wreg, status,2
   828 ;; Tracked objects:
   829 ;;		On entry : 0/0
   830 ;;		On exit  : 0/0
   831 ;;		Unchanged: 0/0
   832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   833 ;;      Params:         0       0       0       0       0       0       0
   834 ;;      Locals:         0       0       0       0       0       0       0
   835 ;;      Temps:          0       0       0       0       0       0       0
   836 ;;      Totals:         0       0       0       0       0       0       0
   837 ;;Total ram usage:        0 bytes
   838 ;; Hardware stack levels used: 1
   839 ;; Hardware stack levels required when called: 6
   840 ;; This function calls:
   841 ;;		Nothing
   842 ;; This function is called by:
   843 ;;		_setup
   844 ;; This function uses a non-reentrant model
   845 ;;
   846                           
   847                           	psect	text3
   848   0011A8                     __ptext3:
   849                           	callstack 0
   850   0011A8                     _setup_io:
   851                           	callstack 23
   852   0011A8                     
   853                           ;IO.c: 44:     TRISA = 0b11000011;
   854   0011A8  0EC3               	movlw	195
   855   0011AA  6E92               	movwf	146,c	;volatile
   856                           
   857                           ;IO.c: 45:     TRISB = 0b00111111;
   858   0011AC  0E3F               	movlw	63
   859   0011AE  6E93               	movwf	147,c	;volatile
   860                           
   861                           ;IO.c: 46:     TRISC = 0b11111011;
   862   0011B0  0EFB               	movlw	251
   863   0011B2  6E94               	movwf	148,c	;volatile
   864                           
   865                           ;IO.c: 47:     TRISD = 0b00000000;
   866   0011B4  0E00               	movlw	0
   867   0011B6  6E95               	movwf	149,c	;volatile
   868                           
   869                           ;IO.c: 48:     TRISE = 0b11111001;
   870   0011B8  0EF9               	movlw	249
   871   0011BA  6E96               	movwf	150,c	;volatile
   872                           
   873                           ;IO.c: 49:     LATA = 0b00000000;
   874   0011BC  0E00               	movlw	0
   875   0011BE  6E89               	movwf	137,c	;volatile
   876                           
   877                           ;IO.c: 50:     LATB = 0b00000000;
   878   0011C0  0E00               	movlw	0
   879   0011C2  6E8A               	movwf	138,c	;volatile
   880                           
   881                           ;IO.c: 51:     LATD = 0b00000000;
   882   0011C4  0E00               	movlw	0
   883   0011C6  6E8C               	movwf	140,c	;volatile
   884   0011C8  0012               	return		;funcret
   885   0011CA                     __end_of_setup_io:
   886                           	callstack 0
   887                           
   888 ;; *************** function _lcd_str *****************
   889 ;; Defined at:
   890 ;;		line 76 in file "lcd.c"
   891 ;; Parameters:    Size  Location     Type
   892 ;;  str             2    2[BANK0 ] PTR const unsigned char 
   893 ;;		 -> STR_3(5), STR_2(5), STR_1(14), 
   894 ;; Auto vars:     Size  Location     Type
   895 ;;  i               1    6[BANK0 ] unsigned char 
   896 ;; Return value:  Size  Location     Type
   897 ;;                  1    wreg      void 
   898 ;; Registers used:
   899 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   900 ;; Tracked objects:
   901 ;;		On entry : 0/0
   902 ;;		On exit  : 0/0
   903 ;;		Unchanged: 0/0
   904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   905 ;;      Params:         0       2       0       0       0       0       0
   906 ;;      Locals:         0       1       0       0       0       0       0
   907 ;;      Temps:          0       2       0       0       0       0       0
   908 ;;      Totals:         0       5       0       0       0       0       0
   909 ;;Total ram usage:        5 bytes
   910 ;; Hardware stack levels used: 1
   911 ;; Hardware stack levels required when called: 8
   912 ;; This function calls:
   913 ;;		_lcd_dat
   914 ;; This function is called by:
   915 ;;		_setup
   916 ;; This function uses a non-reentrant model
   917 ;;
   918                           
   919                           	psect	text4
   920   000FBE                     __ptext4:
   921                           	callstack 0
   922   000FBE                     _lcd_str:
   923                           	callstack 21
   924   000FBE                     
   925                           ;lcd.c: 76: void lcd_str(const char* str);lcd.c: 77: {;lcd.c: 78:  unsigned char i=0;
   926   000FBE  0E00               	movlw	0
   927   000FC0  0100               	movlb	0	; () banked
   928   000FC2  6F97               	movwf	lcd_str@i& (0+255),b
   929                           
   930                           ;lcd.c: 80:  while(str[i] != 0 )
   931   000FC4  EFF4  F007         	goto	l2050
   932   000FC8                     l2046:
   933                           
   934                           ; BSR set to: 0
   935                           ;lcd.c: 81:  {;lcd.c: 82:    lcd_dat(str[i]);
   936   000FC8  5197               	movf	lcd_str@i& (0+255),w,b
   937   000FCA  2593               	addwf	lcd_str@str& (0+255),w,b
   938   000FCC  6F95               	movwf	??_lcd_str& (0+255),b
   939   000FCE  0E00               	movlw	0
   940   000FD0  2194               	addwfc	(lcd_str@str+1)& (0+255),w,b
   941   000FD2  6F96               	movwf	(??_lcd_str+1)& (0+255),b
   942   000FD4  C095  FFF6         	movff	??_lcd_str,tblptrl
   943   000FD8  C096  FFF7         	movff	??_lcd_str+1,tblptrh
   944   000FDC                     	if	0	;tblptru may be non-zero
   945   000FDC                     	endif
   946   000FDC                     	if	0	;tblptru may be non-zero
   947   000FDC                     	endif
   948   000FDC  0008               	tblrd		*
   949   000FDE  50F5               	movf	tablat,w,c
   950   000FE0  EC9B  F008         	call	_lcd_dat
   951   000FE4                     
   952                           ;lcd.c: 83:    i++;
   953   000FE4  0100               	movlb	0	; () banked
   954   000FE6  2B97               	incf	lcd_str@i& (0+255),f,b
   955   000FE8                     l2050:
   956                           
   957                           ; BSR set to: 0
   958                           ;lcd.c: 80:  while(str[i] != 0 )
   959   000FE8  5197               	movf	lcd_str@i& (0+255),w,b
   960   000FEA  2593               	addwf	lcd_str@str& (0+255),w,b
   961   000FEC  6F95               	movwf	??_lcd_str& (0+255),b
   962   000FEE  0E00               	movlw	0
   963   000FF0  2194               	addwfc	(lcd_str@str+1)& (0+255),w,b
   964   000FF2  6F96               	movwf	(??_lcd_str+1)& (0+255),b
   965   000FF4  C095  FFF6         	movff	??_lcd_str,tblptrl
   966   000FF8  C096  FFF7         	movff	??_lcd_str+1,tblptrh
   967   000FFC                     	if	0	;tblptru may be non-zero
   968   000FFC                     	endif
   969   000FFC                     	if	0	;tblptru may be non-zero
   970   000FFC                     	endif
   971   000FFC  0008               	tblrd		*
   972   000FFE  50F5               	movf	tablat,w,c
   973   001000  0900               	iorlw	0
   974   001002  A4D8               	btfss	status,2,c
   975   001004  EF06  F008         	goto	u751
   976   001008  EF08  F008         	goto	u750
   977   00100C                     u751:
   978   00100C  EFE4  F007         	goto	l2046
   979   001010                     u750:
   980   001010                     
   981                           ; BSR set to: 0
   982   001010  0012               	return		;funcret
   983   001012                     __end_of_lcd_str:
   984                           	callstack 0
   985                           
   986 ;; *************** function _lcd_dat *****************
   987 ;; Defined at:
   988 ;;		line 45 in file "lcd.c"
   989 ;; Parameters:    Size  Location     Type
   990 ;;  val             1    wreg     unsigned char 
   991 ;; Auto vars:     Size  Location     Type
   992 ;;  val             1    1[BANK0 ] unsigned char 
   993 ;; Return value:  Size  Location     Type
   994 ;;                  1    wreg      void 
   995 ;; Registers used:
   996 ;;		wreg, status,2, cstack
   997 ;; Tracked objects:
   998 ;;		On entry : 0/0
   999 ;;		On exit  : 0/0
  1000 ;;		Unchanged: 0/0
  1001 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1002 ;;      Params:         0       0       0       0       0       0       0
  1003 ;;      Locals:         0       1       0       0       0       0       0
  1004 ;;      Temps:          0       0       0       0       0       0       0
  1005 ;;      Totals:         0       1       0       0       0       0       0
  1006 ;;Total ram usage:        1 bytes
  1007 ;; Hardware stack levels used: 1
  1008 ;; Hardware stack levels required when called: 7
  1009 ;; This function calls:
  1010 ;;		_lcd_wr
  1011 ;; This function is called by:
  1012 ;;		_lcd_str
  1013 ;; This function uses a non-reentrant model
  1014 ;;
  1015                           
  1016                           	psect	text5
  1017   001136                     __ptext5:
  1018                           	callstack 0
  1019   001136                     _lcd_dat:
  1020                           	callstack 21
  1021                           
  1022                           ; BSR set to: 0
  1023                           ;incstack = 0
  1024                           ;lcd_dat@val stored from wreg
  1025   001136  0100               	movlb	0	; () banked
  1026   001138  6F92               	movwf	lcd_dat@val& (0+255),b
  1027   00113A                     
  1028                           ;lcd.c: 45: void lcd_dat(unsigned char val);lcd.c: 46: {;lcd.c: 47:  PORTEbits.RE1=1;
  1029   00113A  8284               	bsf	132,1,c	;volatile
  1030   00113C                     
  1031                           ;lcd.c: 48:     lcd_wr(val);
  1032   00113C  0100               	movlb	0	; () banked
  1033   00113E  5192               	movf	lcd_dat@val& (0+255),w,b
  1034   001140  EC33  F009         	call	_lcd_wr
  1035   001144                     
  1036                           ;lcd.c: 49:     PORTEbits.RE2=1;
  1037   001144  8484               	bsf	132,2,c	;volatile
  1038   001146                     
  1039                           ;lcd.c: 50:     _delay((unsigned long)((40)*(4000000/4000000.0)));
  1040   001146  0E0D               	movlw	13
  1041   001148                     u767:
  1042   001148  2EE8               	decfsz	wreg,f,c
  1043   00114A  D7FE               	bra	u767
  1044   00114C  F000               	nop	
  1045   00114E                     
  1046                           ;lcd.c: 51:     PORTEbits.RE1=0;
  1047   00114E  9284               	bcf	132,1,c	;volatile
  1048   001150                     
  1049                           ;lcd.c: 52:     _delay((unsigned long)((40)*(4000000/4000000.0)));
  1050   001150  0E0D               	movlw	13
  1051   001152                     u777:
  1052   001152  2EE8               	decfsz	wreg,f,c
  1053   001154  D7FE               	bra	u777
  1054   001156  F000               	nop	
  1055   001158                     
  1056                           ;lcd.c: 53:  PORTEbits.RE1=1;
  1057   001158  8284               	bsf	132,1,c	;volatile
  1058   00115A  0012               	return		;funcret
  1059   00115C                     __end_of_lcd_dat:
  1060                           	callstack 0
  1061                           
  1062 ;; *************** function _lcd_init *****************
  1063 ;; Defined at:
  1064 ;;		line 56 in file "lcd.c"
  1065 ;; Parameters:    Size  Location     Type
  1066 ;;		None
  1067 ;; Auto vars:     Size  Location     Type
  1068 ;;		None
  1069 ;; Return value:  Size  Location     Type
  1070 ;;                  1    wreg      void 
  1071 ;; Registers used:
  1072 ;;		wreg, status,2, cstack
  1073 ;; Tracked objects:
  1074 ;;		On entry : 0/0
  1075 ;;		On exit  : 0/0
  1076 ;;		Unchanged: 0/0
  1077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1078 ;;      Params:         0       0       0       0       0       0       0
  1079 ;;      Locals:         0       0       0       0       0       0       0
  1080 ;;      Temps:          0       1       0       0       0       0       0
  1081 ;;      Totals:         0       1       0       0       0       0       0
  1082 ;;Total ram usage:        1 bytes
  1083 ;; Hardware stack levels used: 1
  1084 ;; Hardware stack levels required when called: 8
  1085 ;; This function calls:
  1086 ;;		_lcd_cmd
  1087 ;; This function is called by:
  1088 ;;		_setup
  1089 ;; This function uses a non-reentrant model
  1090 ;;
  1091                           
  1092                           	psect	text6
  1093   000E3C                     __ptext6:
  1094                           	callstack 0
  1095   000E3C                     _lcd_init:
  1096                           	callstack 21
  1097   000E3C                     
  1098                           ;lcd.c: 58:  PORTEbits.RE1=0;
  1099   000E3C  9284               	bcf	132,1,c	;volatile
  1100                           
  1101                           ;lcd.c: 59:  PORTEbits.RE2=0;
  1102   000E3E  9484               	bcf	132,2,c	;volatile
  1103   000E40                     
  1104                           ;lcd.c: 60:     _delay((unsigned long)((20)*(4000000/4000.0)));
  1105   000E40  0E1A               	movlw	26
  1106   000E42  0100               	movlb	0	; () banked
  1107   000E44  6F93               	movwf	??_lcd_init& (0+255),b
  1108   000E46  0EF8               	movlw	248
  1109   000E48                     u787:
  1110   000E48  2EE8               	decfsz	wreg,f,c
  1111   000E4A  D7FE               	bra	u787
  1112   000E4C  2F93               	decfsz	??_lcd_init& (0+255),f,b
  1113   000E4E  D7FC               	bra	u787
  1114   000E50  F000               	nop	
  1115   000E52                     
  1116                           ;lcd.c: 61:  PORTEbits.RE1=1;
  1117   000E52  8284               	bsf	132,1,c	;volatile
  1118   000E54                     
  1119                           ;lcd.c: 63:  lcd_cmd(0x38);
  1120   000E54  0E38               	movlw	56
  1121   000E56  ECAE  F008         	call	_lcd_cmd
  1122   000E5A                     
  1123                           ;lcd.c: 64:  _delay((unsigned long)((5)*(4000000/4000.0)));
  1124   000E5A  0E07               	movlw	7
  1125   000E5C  0100               	movlb	0	; () banked
  1126   000E5E  6F93               	movwf	??_lcd_init& (0+255),b
  1127   000E60  0E7D               	movlw	125
  1128   000E62                     u797:
  1129   000E62  2EE8               	decfsz	wreg,f,c
  1130   000E64  D7FE               	bra	u797
  1131   000E66  2F93               	decfsz	??_lcd_init& (0+255),f,b
  1132   000E68  D7FC               	bra	u797
  1133                           
  1134                           ;lcd.c: 65:  lcd_cmd(0x38);
  1135   000E6A  0E38               	movlw	56
  1136   000E6C  ECAE  F008         	call	_lcd_cmd
  1137   000E70                     
  1138                           ;lcd.c: 66:     _delay((unsigned long)((1)*(4000000/4000.0)));
  1139   000E70  0EC8               	movlw	200
  1140   000E72                     u807:
  1141   000E72  D000               	nop2	
  1142   000E74  2EE8               	decfsz	wreg,f,c
  1143   000E76  D7FD               	bra	u807
  1144   000E78                     
  1145                           ;lcd.c: 67:  lcd_cmd(0x38);
  1146   000E78  0E38               	movlw	56
  1147   000E7A  ECAE  F008         	call	_lcd_cmd
  1148   000E7E                     
  1149                           ;lcd.c: 68:  lcd_cmd(0x08);
  1150   000E7E  0E08               	movlw	8
  1151   000E80  ECAE  F008         	call	_lcd_cmd
  1152   000E84                     
  1153                           ;lcd.c: 69:  lcd_cmd(0x0F);
  1154   000E84  0E0F               	movlw	15
  1155   000E86  ECAE  F008         	call	_lcd_cmd
  1156   000E8A                     
  1157                           ;lcd.c: 70:  lcd_cmd(0x01);
  1158   000E8A  0E01               	movlw	1
  1159   000E8C  ECAE  F008         	call	_lcd_cmd
  1160   000E90                     
  1161                           ;lcd.c: 71:  lcd_cmd(0x38);
  1162   000E90  0E38               	movlw	56
  1163   000E92  ECAE  F008         	call	_lcd_cmd
  1164   000E96                     
  1165                           ;lcd.c: 72:     lcd_cmd(0x80);
  1166   000E96  0E80               	movlw	128
  1167   000E98  ECAE  F008         	call	_lcd_cmd
  1168   000E9C                     
  1169                           ;lcd.c: 73:     lcd_cmd(0x0C);
  1170   000E9C  0E0C               	movlw	12
  1171   000E9E  ECAE  F008         	call	_lcd_cmd
  1172   000EA2  0012               	return		;funcret
  1173   000EA4                     __end_of_lcd_init:
  1174                           	callstack 0
  1175                           
  1176 ;; *************** function _lcd_cmd *****************
  1177 ;; Defined at:
  1178 ;;		line 34 in file "lcd.c"
  1179 ;; Parameters:    Size  Location     Type
  1180 ;;  val             1    wreg     unsigned char 
  1181 ;; Auto vars:     Size  Location     Type
  1182 ;;  val             1    1[BANK0 ] unsigned char 
  1183 ;; Return value:  Size  Location     Type
  1184 ;;                  1    wreg      void 
  1185 ;; Registers used:
  1186 ;;		wreg, status,2, cstack
  1187 ;; Tracked objects:
  1188 ;;		On entry : 0/0
  1189 ;;		On exit  : 0/0
  1190 ;;		Unchanged: 0/0
  1191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1192 ;;      Params:         0       0       0       0       0       0       0
  1193 ;;      Locals:         0       1       0       0       0       0       0
  1194 ;;      Temps:          0       0       0       0       0       0       0
  1195 ;;      Totals:         0       1       0       0       0       0       0
  1196 ;;Total ram usage:        1 bytes
  1197 ;; Hardware stack levels used: 1
  1198 ;; Hardware stack levels required when called: 7
  1199 ;; This function calls:
  1200 ;;		_lcd_wr
  1201 ;; This function is called by:
  1202 ;;		_lcd_init
  1203 ;;		_setup
  1204 ;; This function uses a non-reentrant model
  1205 ;;
  1206                           
  1207                           	psect	text7
  1208   00115C                     __ptext7:
  1209                           	callstack 0
  1210   00115C                     _lcd_cmd:
  1211                           	callstack 21
  1212                           
  1213                           ;incstack = 0
  1214                           ;lcd_cmd@val stored from wreg
  1215   00115C  0100               	movlb	0	; () banked
  1216   00115E  6F92               	movwf	lcd_cmd@val& (0+255),b
  1217   001160                     
  1218                           ;lcd.c: 34: void lcd_cmd(unsigned char val);lcd.c: 35: {;lcd.c: 36:  PORTEbits.RE1=1;
  1219   001160  8284               	bsf	132,1,c	;volatile
  1220   001162                     
  1221                           ;lcd.c: 37:     lcd_wr(val);
  1222   001162  0100               	movlb	0	; () banked
  1223   001164  5192               	movf	lcd_cmd@val& (0+255),w,b
  1224   001166  EC33  F009         	call	_lcd_wr
  1225   00116A                     
  1226                           ;lcd.c: 38:     PORTEbits.RE2=0;
  1227   00116A  9484               	bcf	132,2,c	;volatile
  1228   00116C                     
  1229                           ;lcd.c: 39:     _delay((unsigned long)((40)*(4000000/4000000.0)));
  1230   00116C  0E0D               	movlw	13
  1231   00116E                     u817:
  1232   00116E  2EE8               	decfsz	wreg,f,c
  1233   001170  D7FE               	bra	u817
  1234   001172  F000               	nop	
  1235   001174                     
  1236                           ;lcd.c: 40:     PORTEbits.RE1=0;
  1237   001174  9284               	bcf	132,1,c	;volatile
  1238   001176                     
  1239                           ;lcd.c: 41:     _delay((unsigned long)((40)*(4000000/4000000.0)));
  1240   001176  0E0D               	movlw	13
  1241   001178                     u827:
  1242   001178  2EE8               	decfsz	wreg,f,c
  1243   00117A  D7FE               	bra	u827
  1244   00117C  F000               	nop	
  1245   00117E                     
  1246                           ;lcd.c: 42:  PORTEbits.RE1=1;
  1247   00117E  8284               	bsf	132,1,c	;volatile
  1248   001180  0012               	return		;funcret
  1249   001182                     __end_of_lcd_cmd:
  1250                           	callstack 0
  1251                           
  1252 ;; *************** function _lcd_wr *****************
  1253 ;; Defined at:
  1254 ;;		line 29 in file "lcd.c"
  1255 ;; Parameters:    Size  Location     Type
  1256 ;;  val             1    wreg     unsigned char 
  1257 ;; Auto vars:     Size  Location     Type
  1258 ;;  val             1    0[BANK0 ] unsigned char 
  1259 ;; Return value:  Size  Location     Type
  1260 ;;                  1    wreg      void 
  1261 ;; Registers used:
  1262 ;;		wreg
  1263 ;; Tracked objects:
  1264 ;;		On entry : 0/0
  1265 ;;		On exit  : 0/0
  1266 ;;		Unchanged: 0/0
  1267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1268 ;;      Params:         0       0       0       0       0       0       0
  1269 ;;      Locals:         0       1       0       0       0       0       0
  1270 ;;      Temps:          0       0       0       0       0       0       0
  1271 ;;      Totals:         0       1       0       0       0       0       0
  1272 ;;Total ram usage:        1 bytes
  1273 ;; Hardware stack levels used: 1
  1274 ;; Hardware stack levels required when called: 6
  1275 ;; This function calls:
  1276 ;;		Nothing
  1277 ;; This function is called by:
  1278 ;;		_lcd_cmd
  1279 ;;		_lcd_dat
  1280 ;; This function uses a non-reentrant model
  1281 ;;
  1282                           
  1283                           	psect	text8
  1284   001266                     __ptext8:
  1285                           	callstack 0
  1286   001266                     _lcd_wr:
  1287                           	callstack 21
  1288                           
  1289                           ;incstack = 0
  1290                           ;lcd_wr@val stored from wreg
  1291   001266  0100               	movlb	0	; () banked
  1292   001268  6F91               	movwf	lcd_wr@val& (0+255),b
  1293   00126A                     
  1294                           ;lcd.c: 29: void lcd_wr(unsigned char val);lcd.c: 30: {;lcd.c: 31:   PORTD=val;
  1295   00126A  C091  FF83         	movff	lcd_wr@val,3971	;volatile
  1296   00126E  0012               	return		;funcret
  1297   001270                     __end_of_lcd_wr:
  1298                           	callstack 0
  1299                           
  1300 ;; *************** function _interrupt_init *****************
  1301 ;; Defined at:
  1302 ;;		line 71 in file "Interrupt.c"
  1303 ;; Parameters:    Size  Location     Type
  1304 ;;		None
  1305 ;; Auto vars:     Size  Location     Type
  1306 ;;		None
  1307 ;; Return value:  Size  Location     Type
  1308 ;;                  1    wreg      void 
  1309 ;; Registers used:
  1310 ;;		wreg, status,2
  1311 ;; Tracked objects:
  1312 ;;		On entry : 0/0
  1313 ;;		On exit  : 0/0
  1314 ;;		Unchanged: 0/0
  1315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1316 ;;      Params:         0       0       0       0       0       0       0
  1317 ;;      Locals:         0       0       0       0       0       0       0
  1318 ;;      Temps:          0       0       0       0       0       0       0
  1319 ;;      Totals:         0       0       0       0       0       0       0
  1320 ;;Total ram usage:        0 bytes
  1321 ;; Hardware stack levels used: 1
  1322 ;; Hardware stack levels required when called: 6
  1323 ;; This function calls:
  1324 ;;		Nothing
  1325 ;; This function is called by:
  1326 ;;		_setup
  1327 ;; This function uses a non-reentrant model
  1328 ;;
  1329                           
  1330                           	psect	text9
  1331   00120E                     __ptext9:
  1332                           	callstack 0
  1333   00120E                     _interrupt_init:
  1334                           	callstack 23
  1335   00120E                     
  1336                           ;Interrupt.c: 73:     INTCON = 0b10010000;
  1337   00120E  0E90               	movlw	144
  1338   001210  6EF2               	movwf	242,c	;volatile
  1339                           
  1340                           ;Interrupt.c: 74:     INTCON2 = 0b00000101;
  1341   001212  0E05               	movlw	5
  1342   001214  6EF1               	movwf	241,c	;volatile
  1343                           
  1344                           ;Interrupt.c: 75:     INTCON3 = 0b11011000;
  1345   001216  0ED8               	movlw	216
  1346   001218  6EF0               	movwf	240,c	;volatile
  1347                           
  1348                           ;Interrupt.c: 76:     T0CON = 0b11000001;
  1349   00121A  0EC1               	movlw	193
  1350   00121C  6ED5               	movwf	213,c	;volatile
  1351                           
  1352                           ;Interrupt.c: 82:     TMR0 = 0x06;
  1353   00121E  0E00               	movlw	0
  1354   001220  6ED7               	movwf	215,c	;volatile
  1355   001222  0E06               	movlw	6
  1356   001224  6ED6               	movwf	214,c	;volatile
  1357   001226  0012               	return		;funcret
  1358   001228                     __end_of_interrupt_init:
  1359                           	callstack 0
  1360                           
  1361 ;; *************** function _enable_interrupts *****************
  1362 ;; Defined at:
  1363 ;;		line 64 in file "Interrupt.c"
  1364 ;; Parameters:    Size  Location     Type
  1365 ;;		None
  1366 ;; Auto vars:     Size  Location     Type
  1367 ;;		None
  1368 ;; Return value:  Size  Location     Type
  1369 ;;                  1    wreg      void 
  1370 ;; Registers used:
  1371 ;;		None
  1372 ;; Tracked objects:
  1373 ;;		On entry : 0/0
  1374 ;;		On exit  : 0/0
  1375 ;;		Unchanged: 0/0
  1376 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1377 ;;      Params:         0       0       0       0       0       0       0
  1378 ;;      Locals:         0       0       0       0       0       0       0
  1379 ;;      Temps:          0       0       0       0       0       0       0
  1380 ;;      Totals:         0       0       0       0       0       0       0
  1381 ;;Total ram usage:        0 bytes
  1382 ;; Hardware stack levels used: 1
  1383 ;; Hardware stack levels required when called: 6
  1384 ;; This function calls:
  1385 ;;		Nothing
  1386 ;; This function is called by:
  1387 ;;		_setup
  1388 ;; This function uses a non-reentrant model
  1389 ;;
  1390                           
  1391                           	psect	text10
  1392   001270                     __ptext10:
  1393                           	callstack 0
  1394   001270                     _enable_interrupts:
  1395                           	callstack 23
  1396   001270                     
  1397                           ;Interrupt.c: 65:     TMR0IE = 1;
  1398   001270  8AF2               	bsf	4082,5,c	;volatile
  1399                           
  1400                           ;Interrupt.c: 66:     ADIE = 1;
  1401   001272  8C9D               	bsf	3997,6,c	;volatile
  1402                           
  1403                           ;Interrupt.c: 67:     PEIE = 1;
  1404   001274  8CF2               	bsf	4082,6,c	;volatile
  1405                           
  1406                           ;Interrupt.c: 68:     GIE = 1;
  1407   001276  8EF2               	bsf	4082,7,c	;volatile
  1408   001278  0012               	return		;funcret
  1409   00127A                     __end_of_enable_interrupts:
  1410                           	callstack 0
  1411                           
  1412 ;; *************** function _disable_interrupts *****************
  1413 ;; Defined at:
  1414 ;;		line 58 in file "Interrupt.c"
  1415 ;; Parameters:    Size  Location     Type
  1416 ;;		None
  1417 ;; Auto vars:     Size  Location     Type
  1418 ;;		None
  1419 ;; Return value:  Size  Location     Type
  1420 ;;                  1    wreg      void 
  1421 ;; Registers used:
  1422 ;;		None
  1423 ;; Tracked objects:
  1424 ;;		On entry : 0/0
  1425 ;;		On exit  : 0/0
  1426 ;;		Unchanged: 0/0
  1427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1428 ;;      Params:         0       0       0       0       0       0       0
  1429 ;;      Locals:         0       0       0       0       0       0       0
  1430 ;;      Temps:          0       0       0       0       0       0       0
  1431 ;;      Totals:         0       0       0       0       0       0       0
  1432 ;;Total ram usage:        0 bytes
  1433 ;; Hardware stack levels used: 1
  1434 ;; Hardware stack levels required when called: 6
  1435 ;; This function calls:
  1436 ;;		Nothing
  1437 ;; This function is called by:
  1438 ;;		_setup
  1439 ;; This function uses a non-reentrant model
  1440 ;;
  1441                           
  1442                           	psect	text11
  1443   00127A                     __ptext11:
  1444                           	callstack 0
  1445   00127A                     _disable_interrupts:
  1446                           	callstack 23
  1447   00127A                     
  1448                           ;Interrupt.c: 59:     IPEN = 0;
  1449   00127A  9ED0               	bcf	4048,7,c	;volatile
  1450                           
  1451                           ;Interrupt.c: 60:     GIE = 0;
  1452   00127C  9EF2               	bcf	4082,7,c	;volatile
  1453                           
  1454                           ;Interrupt.c: 61:     PEIE = 0;
  1455   00127E  9CF2               	bcf	4082,6,c	;volatile
  1456   001280  0012               	return		;funcret
  1457   001282                     __end_of_disable_interrupts:
  1458                           	callstack 0
  1459                           
  1460 ;; *************** function _AD_init *****************
  1461 ;; Defined at:
  1462 ;;		line 12 in file "ADC.c"
  1463 ;; Parameters:    Size  Location     Type
  1464 ;;		None
  1465 ;; Auto vars:     Size  Location     Type
  1466 ;;		None
  1467 ;; Return value:  Size  Location     Type
  1468 ;;                  1    wreg      void 
  1469 ;; Registers used:
  1470 ;;		wreg, status,2
  1471 ;; Tracked objects:
  1472 ;;		On entry : 0/0
  1473 ;;		On exit  : 0/0
  1474 ;;		Unchanged: 0/0
  1475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1476 ;;      Params:         0       0       0       0       0       0       0
  1477 ;;      Locals:         0       0       0       0       0       0       0
  1478 ;;      Temps:          0       0       0       0       0       0       0
  1479 ;;      Totals:         0       0       0       0       0       0       0
  1480 ;;Total ram usage:        0 bytes
  1481 ;; Hardware stack levels used: 1
  1482 ;; Hardware stack levels required when called: 6
  1483 ;; This function calls:
  1484 ;;		Nothing
  1485 ;; This function is called by:
  1486 ;;		_setup
  1487 ;; This function uses a non-reentrant model
  1488 ;;
  1489                           
  1490                           	psect	text12
  1491   00124A                     __ptext12:
  1492                           	callstack 0
  1493   00124A                     _AD_init:
  1494                           	callstack 23
  1495   00124A                     
  1496                           ;ADC.c: 14:     ADCON0 = 0b00000001;
  1497   00124A  0E01               	movlw	1
  1498   00124C  6EC2               	movwf	194,c	;volatile
  1499                           
  1500                           ;ADC.c: 15:     ADCON1 = 0b00001101;
  1501   00124E  0E0D               	movlw	13
  1502   001250  6EC1               	movwf	193,c	;volatile
  1503                           
  1504                           ;ADC.c: 16:     ADCON2 = 0b00010100;
  1505   001252  0E14               	movlw	20
  1506   001254  6EC0               	movwf	192,c	;volatile
  1507   001256  0012               	return		;funcret
  1508   001258                     __end_of_AD_init:
  1509                           	callstack 0
  1510                           
  1511 ;; *************** function _loop *****************
  1512 ;; Defined at:
  1513 ;;		line 44 in file "main.c"
  1514 ;; Parameters:    Size  Location     Type
  1515 ;;		None
  1516 ;; Auto vars:     Size  Location     Type
  1517 ;;		None
  1518 ;; Return value:  Size  Location     Type
  1519 ;;                  1    wreg      void 
  1520 ;; Registers used:
  1521 ;;		None
  1522 ;; Tracked objects:
  1523 ;;		On entry : 0/0
  1524 ;;		On exit  : 0/0
  1525 ;;		Unchanged: 0/0
  1526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1527 ;;      Params:         0       0       0       0       0       0       0
  1528 ;;      Locals:         0       0       0       0       0       0       0
  1529 ;;      Temps:          0       0       0       0       0       0       0
  1530 ;;      Totals:         0       0       0       0       0       0       0
  1531 ;;Total ram usage:        0 bytes
  1532 ;; Hardware stack levels used: 1
  1533 ;; Hardware stack levels required when called: 6
  1534 ;; This function calls:
  1535 ;;		Nothing
  1536 ;; This function is called by:
  1537 ;;		_main
  1538 ;; This function uses a non-reentrant model
  1539 ;;
  1540                           
  1541                           	psect	text13
  1542   001298                     __ptext13:
  1543                           	callstack 0
  1544   001298                     _loop:
  1545                           	callstack 24
  1546   001298  0012               	return		;funcret
  1547   00129A                     __end_of_loop:
  1548                           	callstack 0
  1549                           
  1550 ;; *************** function _f_interrupt_high *****************
  1551 ;; Defined at:
  1552 ;;		line 26 in file "Interrupt.c"
  1553 ;; Parameters:    Size  Location     Type
  1554 ;;		None
  1555 ;; Auto vars:     Size  Location     Type
  1556 ;;		None
  1557 ;; Return value:  Size  Location     Type
  1558 ;;                  1    wreg      void 
  1559 ;; Registers used:
  1560 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1561 ;; Tracked objects:
  1562 ;;		On entry : 0/0
  1563 ;;		On exit  : 0/0
  1564 ;;		Unchanged: 0/0
  1565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1566 ;;      Params:         0       0       0       0       0       0       0
  1567 ;;      Locals:         0       0       0       0       0       0       0
  1568 ;;      Temps:          8       0       0       0       0       0       0
  1569 ;;      Totals:         8       0       0       0       0       0       0
  1570 ;;Total ram usage:        8 bytes
  1571 ;; Hardware stack levels used: 1
  1572 ;; Hardware stack levels required when called: 5
  1573 ;; This function calls:
  1574 ;;		_ADC_maq
  1575 ;;		_f_timers
  1576 ;; This function is called by:
  1577 ;;		Interrupt level 2
  1578 ;; This function uses a non-reentrant model
  1579 ;;
  1580                           
  1581                           	psect	intcode
  1582   000008                     __pintcode:
  1583                           	callstack 0
  1584   000008                     _f_interrupt_high:
  1585                           	callstack 21
  1586                           
  1587                           ;incstack = 0
  1588   000008  826A               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  1589   00000A  EDF3  F004         	call	int_func,f	;refresh shadow registers
  1590                           
  1591                           	psect	intcode_body
  1592   0009E6                     __pintcode_body:
  1593                           	callstack 21
  1594   0009E6                     int_func:
  1595                           	callstack 21
  1596   0009E6  0006               	pop		; remove dummy address from shadow register refresh
  1597   0009E8  CFD9 F05E          	movff	fsr2l,??_f_interrupt_high
  1598   0009EC  CFDA F05F          	movff	fsr2h,??_f_interrupt_high+1
  1599   0009F0  CFF3 F060          	movff	prodl,??_f_interrupt_high+2
  1600   0009F4  CFF4 F061          	movff	prodh,??_f_interrupt_high+3
  1601   0009F8  CFF6 F062          	movff	tblptrl,??_f_interrupt_high+4
  1602   0009FC  CFF7 F063          	movff	tblptrh,??_f_interrupt_high+5
  1603   000A00  CFF8 F064          	movff	tblptru,??_f_interrupt_high+6
  1604   000A04  CFF5 F065          	movff	tablat,??_f_interrupt_high+7
  1605   000A08                     
  1606                           ;Interrupt.c: 28:     if (TMR0IF) {
  1607   000A08  A4F2               	btfss	4082,2,c	;volatile
  1608   000A0A  EF09  F005         	goto	i2u66_41
  1609   000A0E  EF0B  F005         	goto	i2u66_40
  1610   000A12                     i2u66_41:
  1611   000A12  EF12  F005         	goto	i2l1956
  1612   000A16                     i2u66_40:
  1613   000A16                     
  1614                           ;Interrupt.c: 29:         TMR0 = 0x06;
  1615   000A16  0E00               	movlw	0
  1616   000A18  6ED7               	movwf	215,c	;volatile
  1617   000A1A  0E06               	movlw	6
  1618   000A1C  6ED6               	movwf	214,c	;volatile
  1619   000A1E                     
  1620                           ;Interrupt.c: 31:         f_timers();
  1621   000A1E  ECBA  F005         	call	_f_timers	;wreg free
  1622   000A22                     
  1623                           ;Interrupt.c: 34:         TMR0IF = 0x00;
  1624   000A22  94F2               	bcf	4082,2,c	;volatile
  1625   000A24                     i2l1956:
  1626                           
  1627                           ;Interrupt.c: 37:     if (INT0IF && INT0IE) {
  1628   000A24  A2F2               	btfss	4082,1,c	;volatile
  1629   000A26  EF17  F005         	goto	i2u67_41
  1630   000A2A  EF19  F005         	goto	i2u67_40
  1631   000A2E                     i2u67_41:
  1632   000A2E  EF21  F005         	goto	i2l310
  1633   000A32                     i2u67_40:
  1634   000A32  A8F2               	btfss	4082,4,c	;volatile
  1635   000A34  EF1E  F005         	goto	i2u68_41
  1636   000A38  EF20  F005         	goto	i2u68_40
  1637   000A3C                     i2u68_41:
  1638   000A3C  EF21  F005         	goto	i2l310
  1639   000A40                     i2u68_40:
  1640   000A40                     
  1641                           ;Interrupt.c: 39:         INT0IF = 0;
  1642   000A40  92F2               	bcf	4082,1,c	;volatile
  1643   000A42                     i2l310:
  1644                           
  1645                           ;Interrupt.c: 42:     if (INT1IF && INT1IE) {
  1646   000A42  A0F0               	btfss	4080,0,c	;volatile
  1647   000A44  EF26  F005         	goto	i2u69_41
  1648   000A48  EF28  F005         	goto	i2u69_40
  1649   000A4C                     i2u69_41:
  1650   000A4C  EF30  F005         	goto	i2l311
  1651   000A50                     i2u69_40:
  1652   000A50  A6F0               	btfss	4080,3,c	;volatile
  1653   000A52  EF2D  F005         	goto	i2u70_41
  1654   000A56  EF2F  F005         	goto	i2u70_40
  1655   000A5A                     i2u70_41:
  1656   000A5A  EF30  F005         	goto	i2l311
  1657   000A5E                     i2u70_40:
  1658   000A5E                     
  1659                           ;Interrupt.c: 44:         INT1IF = 0;
  1660   000A5E  90F0               	bcf	4080,0,c	;volatile
  1661   000A60                     i2l311:
  1662                           
  1663                           ;Interrupt.c: 47:     if (INT2IF && INT2IE) {
  1664   000A60  A2F0               	btfss	4080,1,c	;volatile
  1665   000A62  EF35  F005         	goto	i2u71_41
  1666   000A66  EF37  F005         	goto	i2u71_40
  1667   000A6A                     i2u71_41:
  1668   000A6A  EF3F  F005         	goto	i2l312
  1669   000A6E                     i2u71_40:
  1670   000A6E  A8F0               	btfss	4080,4,c	;volatile
  1671   000A70  EF3C  F005         	goto	i2u72_41
  1672   000A74  EF3E  F005         	goto	i2u72_40
  1673   000A78                     i2u72_41:
  1674   000A78  EF3F  F005         	goto	i2l312
  1675   000A7C                     i2u72_40:
  1676   000A7C                     
  1677                           ;Interrupt.c: 49:         INT2IF = 0;
  1678   000A7C  92F0               	bcf	4080,1,c	;volatile
  1679   000A7E                     i2l312:
  1680                           
  1681                           ;Interrupt.c: 52:     if (ADIF && ADIE) {
  1682   000A7E  AC9E               	btfss	3998,6,c	;volatile
  1683   000A80  EF44  F005         	goto	i2u73_41
  1684   000A84  EF46  F005         	goto	i2u73_40
  1685   000A88                     i2u73_41:
  1686   000A88  EF50  F005         	goto	i2l314
  1687   000A8C                     i2u73_40:
  1688   000A8C  AC9D               	btfss	3997,6,c	;volatile
  1689   000A8E  EF4B  F005         	goto	i2u74_41
  1690   000A92  EF4D  F005         	goto	i2u74_40
  1691   000A96                     i2u74_41:
  1692   000A96  EF50  F005         	goto	i2l314
  1693   000A9A                     i2u74_40:
  1694   000A9A                     
  1695                           ;Interrupt.c: 53:         ADC_maq();
  1696   000A9A  EC84  F007         	call	_ADC_maq	;wreg free
  1697   000A9E                     
  1698                           ;Interrupt.c: 54:         ADIF = 0;
  1699   000A9E  9C9E               	bcf	3998,6,c	;volatile
  1700   000AA0                     i2l314:
  1701   000AA0  C065  FFF5         	movff	??_f_interrupt_high+7,tablat
  1702   000AA4  C064  FFF8         	movff	??_f_interrupt_high+6,tblptru
  1703   000AA8  C063  FFF7         	movff	??_f_interrupt_high+5,tblptrh
  1704   000AAC  C062  FFF6         	movff	??_f_interrupt_high+4,tblptrl
  1705   000AB0  C061  FFF4         	movff	??_f_interrupt_high+3,prodh
  1706   000AB4  C060  FFF3         	movff	??_f_interrupt_high+2,prodl
  1707   000AB8  C05F  FFDA         	movff	??_f_interrupt_high+1,fsr2h
  1708   000ABC  C05E  FFD9         	movff	??_f_interrupt_high,fsr2l
  1709   000AC0  926A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1710   000AC2  0011               	retfie		f
  1711   000AC4                     __end_of_f_interrupt_high:
  1712                           	callstack 0
  1713                           
  1714 ;; *************** function _f_timers *****************
  1715 ;; Defined at:
  1716 ;;		line 84 in file "Interrupt.c"
  1717 ;; Parameters:    Size  Location     Type
  1718 ;;		None
  1719 ;; Auto vars:     Size  Location     Type
  1720 ;;		None
  1721 ;; Return value:  Size  Location     Type
  1722 ;;                  1    wreg      void 
  1723 ;; Registers used:
  1724 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1725 ;; Tracked objects:
  1726 ;;		On entry : 0/0
  1727 ;;		On exit  : 0/0
  1728 ;;		Unchanged: 0/0
  1729 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1730 ;;      Params:         0       0       0       0       0       0       0
  1731 ;;      Locals:         0       0       0       0       0       0       0
  1732 ;;      Temps:          0       0       0       0       0       0       0
  1733 ;;      Totals:         0       0       0       0       0       0       0
  1734 ;;Total ram usage:        0 bytes
  1735 ;; Hardware stack levels used: 1
  1736 ;; Hardware stack levels required when called: 4
  1737 ;; This function calls:
  1738 ;;		_Read_AD
  1739 ;;		_mux_display
  1740 ;;		_read_keyb
  1741 ;;		_read_keyboard
  1742 ;;		_show_to_LCD
  1743 ;; This function is called by:
  1744 ;;		_f_interrupt_high
  1745 ;; This function uses a non-reentrant model
  1746 ;;
  1747                           
  1748                           	psect	text15
  1749   000B74                     __ptext15:
  1750                           	callstack 0
  1751   000B74                     _f_timers:
  1752                           	callstack 21
  1753   000B74                     
  1754                           ;Interrupt.c: 85:     static uint16_t counter0 = 1, counter1 = 1, counter2 = 1, counter3
      +                           = 1;;Interrupt.c: 87:     if (counter0 < 5)
  1755   000B74  502A               	movf	(f_timers@counter0+1)^0,w,c
  1756   000B76  E107               	bnz	i2u62_41
  1757   000B78  0E05               	movlw	5
  1758   000B7A  5C29               	subwf	f_timers@counter0^0,w,c
  1759   000B7C  B0D8               	btfsc	status,0,c
  1760   000B7E  EFC3  F005         	goto	i2u62_41
  1761   000B82  EFC5  F005         	goto	i2u62_40
  1762   000B86                     i2u62_41:
  1763   000B86  EFC9  F005         	goto	i2l1914
  1764   000B8A                     i2u62_40:
  1765   000B8A                     
  1766                           ;Interrupt.c: 88:     {;Interrupt.c: 89:         counter0++;
  1767   000B8A  4A29               	infsnz	f_timers@counter0^0,f,c
  1768   000B8C  2A2A               	incf	(f_timers@counter0+1)^0,f,c
  1769                           
  1770                           ;Interrupt.c: 90:     }
  1771   000B8E  EFCF  F005         	goto	i2l1918
  1772   000B92                     i2l1914:
  1773                           
  1774                           ;Interrupt.c: 92:         mux_display();
  1775   000B92  EC62  F005         	call	_mux_display	;wreg free
  1776   000B96                     
  1777                           ;Interrupt.c: 93:         counter0 = 1;
  1778   000B96  0E00               	movlw	0
  1779   000B98  6E2A               	movwf	(f_timers@counter0+1)^0,c
  1780   000B9A  0E01               	movlw	1
  1781   000B9C  6E29               	movwf	f_timers@counter0^0,c
  1782   000B9E                     i2l1918:
  1783                           
  1784                           ;Interrupt.c: 96:     if (counter1 < temporizador1)
  1785   000B9E  5068               	movf	_temporizador1^0,w,c
  1786   000BA0  5C27               	subwf	f_timers@counter1^0,w,c
  1787   000BA2  5069               	movf	(_temporizador1+1)^0,w,c
  1788   000BA4  5828               	subwfb	(f_timers@counter1+1)^0,w,c
  1789   000BA6  B0D8               	btfsc	status,0,c
  1790   000BA8  EFD8  F005         	goto	i2u63_41
  1791   000BAC  EFDA  F005         	goto	i2u63_40
  1792   000BB0                     i2u63_41:
  1793   000BB0  EFDE  F005         	goto	i2l1922
  1794   000BB4                     i2u63_40:
  1795   000BB4                     
  1796                           ;Interrupt.c: 97:     {;Interrupt.c: 98:         counter1++;
  1797   000BB4  4A27               	infsnz	f_timers@counter1^0,f,c
  1798   000BB6  2A28               	incf	(f_timers@counter1+1)^0,f,c
  1799                           
  1800                           ;Interrupt.c: 99:     }
  1801   000BB8  EFE4  F005         	goto	i2l1926
  1802   000BBC                     i2l1922:
  1803                           
  1804                           ;Interrupt.c: 101:         show_to_LCD();
  1805   000BBC  EC6F  F008         	call	_show_to_LCD	;wreg free
  1806   000BC0                     
  1807                           ;Interrupt.c: 102:         counter1 = 1;
  1808   000BC0  0E00               	movlw	0
  1809   000BC2  6E28               	movwf	(f_timers@counter1+1)^0,c
  1810   000BC4  0E01               	movlw	1
  1811   000BC6  6E27               	movwf	f_timers@counter1^0,c
  1812   000BC8                     i2l1926:
  1813                           
  1814                           ;Interrupt.c: 105:     if (counter2 < temporizador2)
  1815   000BC8  5066               	movf	_temporizador2^0,w,c
  1816   000BCA  5C25               	subwf	f_timers@counter2^0,w,c
  1817   000BCC  5067               	movf	(_temporizador2+1)^0,w,c
  1818   000BCE  5826               	subwfb	(f_timers@counter2+1)^0,w,c
  1819   000BD0  B0D8               	btfsc	status,0,c
  1820   000BD2  EFED  F005         	goto	i2u64_41
  1821   000BD6  EFEF  F005         	goto	i2u64_40
  1822   000BDA                     i2u64_41:
  1823   000BDA  EFF3  F005         	goto	i2l1930
  1824   000BDE                     i2u64_40:
  1825   000BDE                     
  1826                           ;Interrupt.c: 106:     {;Interrupt.c: 107:         counter2++;
  1827   000BDE  4A25               	infsnz	f_timers@counter2^0,f,c
  1828   000BE0  2A26               	incf	(f_timers@counter2+1)^0,f,c
  1829                           
  1830                           ;Interrupt.c: 108:     }
  1831   000BE2  EFF7  F005         	goto	i2l1932
  1832   000BE6                     i2l1930:
  1833                           
  1834                           ;Interrupt.c: 110:         counter2 = 1;
  1835   000BE6  0E00               	movlw	0
  1836   000BE8  6E26               	movwf	(f_timers@counter2+1)^0,c
  1837   000BEA  0E01               	movlw	1
  1838   000BEC  6E25               	movwf	f_timers@counter2^0,c
  1839   000BEE                     i2l1932:
  1840                           
  1841                           ;Interrupt.c: 113:     if (counter3 < 10)
  1842   000BEE  5024               	movf	(f_timers@counter3+1)^0,w,c
  1843   000BF0  E107               	bnz	i2u65_41
  1844   000BF2  0E0A               	movlw	10
  1845   000BF4  5C23               	subwf	f_timers@counter3^0,w,c
  1846   000BF6  B0D8               	btfsc	status,0,c
  1847   000BF8  EF00  F006         	goto	i2u65_41
  1848   000BFC  EF02  F006         	goto	i2u65_40
  1849   000C00                     i2u65_41:
  1850   000C00  EF06  F006         	goto	i2l1936
  1851   000C04                     i2u65_40:
  1852   000C04                     
  1853                           ;Interrupt.c: 114:     {;Interrupt.c: 115:         counter3++;
  1854   000C04  4A23               	infsnz	f_timers@counter3^0,f,c
  1855   000C06  2A24               	incf	(f_timers@counter3+1)^0,f,c
  1856                           
  1857                           ;Interrupt.c: 116:     }
  1858   000C08  EF10  F006         	goto	i2l342
  1859   000C0C                     i2l1936:
  1860                           
  1861                           ;Interrupt.c: 119:     {;Interrupt.c: 120:         read_keyboard();
  1862   000C0C  ECCF  F003         	call	_read_keyboard	;wreg free
  1863   000C10                     
  1864                           ;Interrupt.c: 121:         read_keyb();
  1865   000C10  EC11  F006         	call	_read_keyb	;wreg free
  1866   000C14                     
  1867                           ;Interrupt.c: 122:         Read_AD();
  1868   000C14  EC67  F004         	call	_Read_AD	;wreg free
  1869   000C18                     
  1870                           ;Interrupt.c: 123:         counter3 = 1;
  1871   000C18  0E00               	movlw	0
  1872   000C1A  6E24               	movwf	(f_timers@counter3+1)^0,c
  1873   000C1C  0E01               	movlw	1
  1874   000C1E  6E23               	movwf	f_timers@counter3^0,c
  1875   000C20                     i2l342:
  1876   000C20  0012               	return		;funcret
  1877   000C22                     __end_of_f_timers:
  1878                           	callstack 0
  1879                           
  1880 ;; *************** function _show_to_LCD *****************
  1881 ;; Defined at:
  1882 ;;		line 108 in file "main.c"
  1883 ;; Parameters:    Size  Location     Type
  1884 ;;		None
  1885 ;; Auto vars:     Size  Location     Type
  1886 ;;		None
  1887 ;; Return value:  Size  Location     Type
  1888 ;;                  1    wreg      void 
  1889 ;; Registers used:
  1890 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1891 ;; Tracked objects:
  1892 ;;		On entry : 0/0
  1893 ;;		On exit  : 0/0
  1894 ;;		Unchanged: 0/0
  1895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1896 ;;      Params:         0       0       0       0       0       0       0
  1897 ;;      Locals:         0       0       0       0       0       0       0
  1898 ;;      Temps:          0       0       0       0       0       0       0
  1899 ;;      Totals:         0       0       0       0       0       0       0
  1900 ;;Total ram usage:        0 bytes
  1901 ;; Hardware stack levels used: 1
  1902 ;; Hardware stack levels required when called: 3
  1903 ;; This function calls:
  1904 ;;		i2_lcd_cmd
  1905 ;;		i2_lcd_dat
  1906 ;;		i2_lcd_str
  1907 ;; This function is called by:
  1908 ;;		_f_timers
  1909 ;; This function uses a non-reentrant model
  1910 ;;
  1911                           
  1912                           	psect	text16
  1913   0010DE                     __ptext16:
  1914                           	callstack 0
  1915   0010DE                     _show_to_LCD:
  1916                           	callstack 21
  1917   0010DE                     
  1918                           ;main.c: 110:     lcd_cmd(0xC0);
  1919   0010DE  0EC0               	movlw	192
  1920   0010E0  ECF6  F008         	call	i2_lcd_cmd
  1921   0010E4                     
  1922                           ;main.c: 111:     lcd_str("PWM:");
  1923   0010E4  0E0F               	movlw	low STR_2
  1924   0010E6  6E50               	movwf	i2lcd_str@str^0,c
  1925   0010E8  0E06               	movlw	high STR_2
  1926   0010EA  6E51               	movwf	(i2lcd_str@str+1)^0,c
  1927   0010EC  EC09  F008         	call	i2_lcd_str	;wreg free
  1928   0010F0                     
  1929                           ;main.c: 112:     lcd_dat(duty_LCD1);
  1930   0010F0  5031               	movf	_duty_LCD1^0,w,c
  1931   0010F2  ECE5  F008         	call	i2_lcd_dat
  1932   0010F6                     
  1933                           ;main.c: 113:     lcd_dat(duty_LCD2);
  1934   0010F6  5030               	movf	_duty_LCD2^0,w,c
  1935   0010F8  ECE5  F008         	call	i2_lcd_dat
  1936   0010FC                     
  1937                           ;main.c: 114:     lcd_dat(duty_LCD3);
  1938   0010FC  502F               	movf	_duty_LCD3^0,w,c
  1939   0010FE  ECE5  F008         	call	i2_lcd_dat
  1940   001102                     
  1941                           ;main.c: 115:     lcd_dat(duty_LCD4);
  1942   001102  502E               	movf	_duty_LCD4^0,w,c
  1943   001104  ECE5  F008         	call	i2_lcd_dat
  1944   001108  0012               	return		;funcret
  1945   00110A                     __end_of_show_to_LCD:
  1946                           	callstack 0
  1947                           
  1948 ;; *************** function i2_lcd_str *****************
  1949 ;; Defined at:
  1950 ;;		line 76 in file "lcd.c"
  1951 ;; Parameters:    Size  Location     Type
  1952 ;;  str             2    2[COMRAM] PTR const unsigned char 
  1953 ;;		 -> STR_3(5), STR_2(5), STR_1(14), 
  1954 ;; Auto vars:     Size  Location     Type
  1955 ;;  i               1    6[COMRAM] unsigned char 
  1956 ;; Return value:  Size  Location     Type
  1957 ;;                  1    wreg      void 
  1958 ;; Registers used:
  1959 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1960 ;; Tracked objects:
  1961 ;;		On entry : 0/0
  1962 ;;		On exit  : 0/0
  1963 ;;		Unchanged: 0/0
  1964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1965 ;;      Params:         2       0       0       0       0       0       0
  1966 ;;      Locals:         1       0       0       0       0       0       0
  1967 ;;      Temps:          2       0       0       0       0       0       0
  1968 ;;      Totals:         5       0       0       0       0       0       0
  1969 ;;Total ram usage:        5 bytes
  1970 ;; Hardware stack levels used: 1
  1971 ;; Hardware stack levels required when called: 2
  1972 ;; This function calls:
  1973 ;;		i2_lcd_dat
  1974 ;; This function is called by:
  1975 ;;		_show_to_LCD
  1976 ;; This function uses a non-reentrant model
  1977 ;;
  1978                           
  1979                           	psect	text17
  1980   001012                     __ptext17:
  1981                           	callstack 0
  1982   001012                     i2_lcd_str:
  1983                           	callstack 21
  1984   001012                     
  1985                           ;lcd.c: 76: void lcd_str(const char* str);lcd.c: 77: {;lcd.c: 78:  unsigned char i=0;
  1986   001012  0E00               	movlw	0
  1987   001014  6E54               	movwf	i2lcd_str@i^0,c
  1988                           
  1989                           ;lcd.c: 80:  while(str[i] != 0 )
  1990   001016  EF1C  F008         	goto	i2l1806
  1991   00101A                     i2l1802:
  1992                           
  1993                           ;lcd.c: 81:  {;lcd.c: 82:    lcd_dat(str[i]);
  1994   00101A  5054               	movf	i2lcd_str@i^0,w,c
  1995   00101C  2450               	addwf	i2lcd_str@str^0,w,c
  1996   00101E  6E52               	movwf	??i2_lcd_str^0,c
  1997   001020  0E00               	movlw	0
  1998   001022  2051               	addwfc	(i2lcd_str@str+1)^0,w,c
  1999   001024  6E53               	movwf	(??i2_lcd_str+1)^0,c
  2000   001026  C052  FFF6         	movff	??i2_lcd_str,tblptrl
  2001   00102A  C053  FFF7         	movff	??i2_lcd_str+1,tblptrh
  2002   00102E                     	if	0	;tblptru may be non-zero
  2003   00102E                     	endif
  2004   00102E                     	if	0	;tblptru may be non-zero
  2005   00102E                     	endif
  2006   00102E  0008               	tblrd		*
  2007   001030  50F5               	movf	tablat,w,c
  2008   001032  ECE5  F008         	call	i2_lcd_dat
  2009   001036                     
  2010                           ;lcd.c: 83:    i++;
  2011   001036  2A54               	incf	i2lcd_str@i^0,f,c
  2012   001038                     i2l1806:
  2013                           
  2014                           ;lcd.c: 80:  while(str[i] != 0 )
  2015   001038  5054               	movf	i2lcd_str@i^0,w,c
  2016   00103A  2450               	addwf	i2lcd_str@str^0,w,c
  2017   00103C  6E52               	movwf	??i2_lcd_str^0,c
  2018   00103E  0E00               	movlw	0
  2019   001040  2051               	addwfc	(i2lcd_str@str+1)^0,w,c
  2020   001042  6E53               	movwf	(??i2_lcd_str+1)^0,c
  2021   001044  C052  FFF6         	movff	??i2_lcd_str,tblptrl
  2022   001048  C053  FFF7         	movff	??i2_lcd_str+1,tblptrh
  2023   00104C                     	if	0	;tblptru may be non-zero
  2024   00104C                     	endif
  2025   00104C                     	if	0	;tblptru may be non-zero
  2026   00104C                     	endif
  2027   00104C  0008               	tblrd		*
  2028   00104E  50F5               	movf	tablat,w,c
  2029   001050  0900               	iorlw	0
  2030   001052  A4D8               	btfss	status,2,c
  2031   001054  EF2E  F008         	goto	i2u53_41
  2032   001058  EF30  F008         	goto	i2u53_40
  2033   00105C                     i2u53_41:
  2034   00105C  EF0D  F008         	goto	i2l1802
  2035   001060                     i2u53_40:
  2036   001060  0012               	return		;funcret
  2037   001062                     __end_ofi2_lcd_str:
  2038                           	callstack 0
  2039                           
  2040 ;; *************** function i2_lcd_dat *****************
  2041 ;; Defined at:
  2042 ;;		line 45 in file "lcd.c"
  2043 ;; Parameters:    Size  Location     Type
  2044 ;;  val             1    wreg     unsigned char 
  2045 ;; Auto vars:     Size  Location     Type
  2046 ;;  val             1    1[COMRAM] unsigned char 
  2047 ;; Return value:  Size  Location     Type
  2048 ;;                  1    wreg      void 
  2049 ;; Registers used:
  2050 ;;		wreg, status,2, cstack
  2051 ;; Tracked objects:
  2052 ;;		On entry : 0/0
  2053 ;;		On exit  : 0/0
  2054 ;;		Unchanged: 0/0
  2055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2056 ;;      Params:         0       0       0       0       0       0       0
  2057 ;;      Locals:         1       0       0       0       0       0       0
  2058 ;;      Temps:          0       0       0       0       0       0       0
  2059 ;;      Totals:         1       0       0       0       0       0       0
  2060 ;;Total ram usage:        1 bytes
  2061 ;; Hardware stack levels used: 1
  2062 ;; Hardware stack levels required when called: 1
  2063 ;; This function calls:
  2064 ;;		i2_lcd_wr
  2065 ;; This function is called by:
  2066 ;;		_show_to_LCD
  2067 ;;		i2_lcd_str
  2068 ;; This function uses a non-reentrant model
  2069 ;;
  2070                           
  2071                           	psect	text18
  2072   0011CA                     __ptext18:
  2073                           	callstack 0
  2074   0011CA                     i2_lcd_dat:
  2075                           	callstack 21
  2076                           
  2077                           ;incstack = 0
  2078                           ;i2lcd_dat@val stored from wreg
  2079   0011CA  6E4F               	movwf	i2lcd_dat@val^0,c
  2080   0011CC                     
  2081                           ;lcd.c: 45: void lcd_dat(unsigned char val);lcd.c: 46: {;lcd.c: 47:  PORTEbits.RE1=1;
  2082   0011CC  8284               	bsf	132,1,c	;volatile
  2083   0011CE                     
  2084                           ;lcd.c: 48:     lcd_wr(val);
  2085   0011CE  504F               	movf	i2lcd_dat@val^0,w,c
  2086   0011D0  EC41  F009         	call	i2_lcd_wr
  2087   0011D4                     
  2088                           ;lcd.c: 49:     PORTEbits.RE2=1;
  2089   0011D4  8484               	bsf	132,2,c	;volatile
  2090   0011D6                     
  2091                           ;lcd.c: 50:     _delay((unsigned long)((40)*(4000000/4000000.0)));
  2092   0011D6  0E0D               	movlw	13
  2093   0011D8                     i2u83_47:
  2094   0011D8  2EE8               	decfsz	wreg,f,c
  2095   0011DA  D7FE               	bra	i2u83_47
  2096   0011DC  F000               	nop	
  2097   0011DE                     
  2098                           ;lcd.c: 51:     PORTEbits.RE1=0;
  2099   0011DE  9284               	bcf	132,1,c	;volatile
  2100   0011E0                     
  2101                           ;lcd.c: 52:     _delay((unsigned long)((40)*(4000000/4000000.0)));
  2102   0011E0  0E0D               	movlw	13
  2103   0011E2                     i2u84_47:
  2104   0011E2  2EE8               	decfsz	wreg,f,c
  2105   0011E4  D7FE               	bra	i2u84_47
  2106   0011E6  F000               	nop	
  2107   0011E8                     
  2108                           ;lcd.c: 53:  PORTEbits.RE1=1;
  2109   0011E8  8284               	bsf	132,1,c	;volatile
  2110   0011EA  0012               	return		;funcret
  2111   0011EC                     __end_ofi2_lcd_dat:
  2112                           	callstack 0
  2113                           
  2114 ;; *************** function i2_lcd_cmd *****************
  2115 ;; Defined at:
  2116 ;;		line 34 in file "lcd.c"
  2117 ;; Parameters:    Size  Location     Type
  2118 ;;  val             1    wreg     unsigned char 
  2119 ;; Auto vars:     Size  Location     Type
  2120 ;;  val             1    1[COMRAM] unsigned char 
  2121 ;; Return value:  Size  Location     Type
  2122 ;;                  1    wreg      void 
  2123 ;; Registers used:
  2124 ;;		wreg, status,2, cstack
  2125 ;; Tracked objects:
  2126 ;;		On entry : 0/0
  2127 ;;		On exit  : 0/0
  2128 ;;		Unchanged: 0/0
  2129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2130 ;;      Params:         0       0       0       0       0       0       0
  2131 ;;      Locals:         1       0       0       0       0       0       0
  2132 ;;      Temps:          0       0       0       0       0       0       0
  2133 ;;      Totals:         1       0       0       0       0       0       0
  2134 ;;Total ram usage:        1 bytes
  2135 ;; Hardware stack levels used: 1
  2136 ;; Hardware stack levels required when called: 1
  2137 ;; This function calls:
  2138 ;;		i2_lcd_wr
  2139 ;; This function is called by:
  2140 ;;		_show_to_LCD
  2141 ;; This function uses a non-reentrant model
  2142 ;;
  2143                           
  2144                           	psect	text19
  2145   0011EC                     __ptext19:
  2146                           	callstack 0
  2147   0011EC                     i2_lcd_cmd:
  2148                           	callstack 22
  2149                           
  2150                           ;incstack = 0
  2151                           ;i2lcd_cmd@val stored from wreg
  2152   0011EC  6E4F               	movwf	i2lcd_cmd@val^0,c
  2153   0011EE                     
  2154                           ;lcd.c: 34: void lcd_cmd(unsigned char val);lcd.c: 35: {;lcd.c: 36:  PORTEbits.RE1=1;
  2155   0011EE  8284               	bsf	132,1,c	;volatile
  2156   0011F0                     
  2157                           ;lcd.c: 37:     lcd_wr(val);
  2158   0011F0  504F               	movf	i2lcd_cmd@val^0,w,c
  2159   0011F2  EC41  F009         	call	i2_lcd_wr
  2160   0011F6                     
  2161                           ;lcd.c: 38:     PORTEbits.RE2=0;
  2162   0011F6  9484               	bcf	132,2,c	;volatile
  2163   0011F8                     
  2164                           ;lcd.c: 39:     _delay((unsigned long)((40)*(4000000/4000000.0)));
  2165   0011F8  0E0D               	movlw	13
  2166   0011FA                     i2u85_47:
  2167   0011FA  2EE8               	decfsz	wreg,f,c
  2168   0011FC  D7FE               	bra	i2u85_47
  2169   0011FE  F000               	nop	
  2170   001200                     
  2171                           ;lcd.c: 40:     PORTEbits.RE1=0;
  2172   001200  9284               	bcf	132,1,c	;volatile
  2173   001202                     
  2174                           ;lcd.c: 41:     _delay((unsigned long)((40)*(4000000/4000000.0)));
  2175   001202  0E0D               	movlw	13
  2176   001204                     i2u86_47:
  2177   001204  2EE8               	decfsz	wreg,f,c
  2178   001206  D7FE               	bra	i2u86_47
  2179   001208  F000               	nop	
  2180   00120A                     
  2181                           ;lcd.c: 42:  PORTEbits.RE1=1;
  2182   00120A  8284               	bsf	132,1,c	;volatile
  2183   00120C  0012               	return		;funcret
  2184   00120E                     __end_ofi2_lcd_cmd:
  2185                           	callstack 0
  2186                           
  2187 ;; *************** function i2_lcd_wr *****************
  2188 ;; Defined at:
  2189 ;;		line 29 in file "lcd.c"
  2190 ;; Parameters:    Size  Location     Type
  2191 ;;  val             1    wreg     unsigned char 
  2192 ;; Auto vars:     Size  Location     Type
  2193 ;;  val             1    0[COMRAM] unsigned char 
  2194 ;; Return value:  Size  Location     Type
  2195 ;;                  1    wreg      void 
  2196 ;; Registers used:
  2197 ;;		wreg
  2198 ;; Tracked objects:
  2199 ;;		On entry : 0/0
  2200 ;;		On exit  : 0/0
  2201 ;;		Unchanged: 0/0
  2202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2203 ;;      Params:         0       0       0       0       0       0       0
  2204 ;;      Locals:         1       0       0       0       0       0       0
  2205 ;;      Temps:          0       0       0       0       0       0       0
  2206 ;;      Totals:         1       0       0       0       0       0       0
  2207 ;;Total ram usage:        1 bytes
  2208 ;; Hardware stack levels used: 1
  2209 ;; This function calls:
  2210 ;;		Nothing
  2211 ;; This function is called by:
  2212 ;;		i2_lcd_cmd
  2213 ;;		i2_lcd_dat
  2214 ;; This function uses a non-reentrant model
  2215 ;;
  2216                           
  2217                           	psect	text20
  2218   001282                     __ptext20:
  2219                           	callstack 0
  2220   001282                     i2_lcd_wr:
  2221                           	callstack 21
  2222                           
  2223                           ;incstack = 0
  2224                           ;i2lcd_wr@val stored from wreg
  2225   001282  6E4E               	movwf	i2lcd_wr@val^0,c
  2226   001284                     
  2227                           ;lcd.c: 29: void lcd_wr(unsigned char val);lcd.c: 30: {;lcd.c: 31:   PORTD=val;
  2228   001284  C04E  FF83         	movff	i2lcd_wr@val,3971	;volatile
  2229   001288  0012               	return		;funcret
  2230   00128A                     __end_ofi2_lcd_wr:
  2231                           	callstack 0
  2232                           
  2233 ;; *************** function _read_keyboard *****************
  2234 ;; Defined at:
  2235 ;;		line 130 in file "main.c"
  2236 ;; Parameters:    Size  Location     Type
  2237 ;;		None
  2238 ;; Auto vars:     Size  Location     Type
  2239 ;;		None
  2240 ;; Return value:  Size  Location     Type
  2241 ;;                  1    wreg      void 
  2242 ;; Registers used:
  2243 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2244 ;; Tracked objects:
  2245 ;;		On entry : 0/0
  2246 ;;		On exit  : 0/0
  2247 ;;		Unchanged: 0/0
  2248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2249 ;;      Params:         0       0       0       0       0       0       0
  2250 ;;      Locals:         0       0       0       0       0       0       0
  2251 ;;      Temps:          2       0       0       0       0       0       0
  2252 ;;      Totals:         2       0       0       0       0       0       0
  2253 ;;Total ram usage:        2 bytes
  2254 ;; Hardware stack levels used: 1
  2255 ;; Hardware stack levels required when called: 1
  2256 ;; This function calls:
  2257 ;;		_ler_teclado
  2258 ;; This function is called by:
  2259 ;;		_f_timers
  2260 ;; This function uses a non-reentrant model
  2261 ;;
  2262                           
  2263                           	psect	text21
  2264   00079E                     __ptext21:
  2265                           	callstack 0
  2266   00079E                     _read_keyboard:
  2267                           	callstack 23
  2268   00079E                     
  2269                           ;main.c: 133:     static uint8_t dado;;main.c: 135:     dado = ler_teclado();
  2270   00079E  EC0B  F003         	call	_ler_teclado	;wreg free
  2271   0007A2  6E42               	movwf	read_keyboard@dado^0,c
  2272   0007A4                     
  2273                           ;main.c: 137:     if (dado!=16 && dado != memoria_dado)
  2274   0007A4  0E10               	movlw	16
  2275   0007A6  1842               	xorwf	read_keyboard@dado^0,w,c
  2276   0007A8  B4D8               	btfsc	status,2,c
  2277   0007AA  EFD9  F003         	goto	i2u30_41
  2278   0007AE  EFDB  F003         	goto	i2u30_40
  2279   0007B2                     i2u30_41:
  2280   0007B2  EF64  F004         	goto	i2l1502
  2281   0007B6                     i2u30_40:
  2282   0007B6  5043               	movf	_memoria_dado^0,w,c
  2283   0007B8  1842               	xorwf	read_keyboard@dado^0,w,c
  2284   0007BA  B4D8               	btfsc	status,2,c
  2285   0007BC  EFE2  F003         	goto	i2u31_41
  2286   0007C0  EFE4  F003         	goto	i2u31_40
  2287   0007C4                     i2u31_41:
  2288   0007C4  EF64  F004         	goto	i2l1502
  2289   0007C8                     i2u31_40:
  2290   0007C8  EF3A  F004         	goto	i2l1494
  2291   0007CC                     i2l212:
  2292                           
  2293                           ;main.c: 142:                 dado1 = dado;
  2294   0007CC  C042  F047         	movff	read_keyboard@dado,_dado1
  2295   0007D0                     
  2296                           ;main.c: 143:                 duty_teclado[i] = dado1;
  2297   0007D0  5047               	movf	_dado1^0,w,c
  2298   0007D2  6E56               	movwf	??_read_keyboard^0,c
  2299   0007D4  6A57               	clrf	(??_read_keyboard+1)^0,c
  2300   0007D6  5048               	movf	_i^0,w,c
  2301   0007D8  0D02               	mullw	2
  2302   0007DA  0E32               	movlw	low _duty_teclado
  2303   0007DC  24F3               	addwf	243,w,c
  2304   0007DE  6ED9               	movwf	fsr2l,c
  2305   0007E0  0E00               	movlw	high _duty_teclado
  2306   0007E2  20F4               	addwfc	prodh,w,c
  2307   0007E4  6EDA               	movwf	fsr2h,c
  2308   0007E6  C056  FFDE         	movff	??_read_keyboard,postinc2
  2309   0007EA  C057  FFDD         	movff	??_read_keyboard+1,postdec2
  2310   0007EE                     i2l1454:
  2311                           
  2312                           ;main.c: 144:                 display1 = dado1;
  2313   0007EE  C047  F04D         	movff	_dado1,_display1
  2314   0007F2                     
  2315                           ;main.c: 145:                 display2 = dado2;
  2316   0007F2  C046  F04C         	movff	_dado2,_display2
  2317   0007F6                     
  2318                           ;main.c: 146:                 display3 = dado3;
  2319   0007F6  C045  F04B         	movff	_dado3,_display3
  2320   0007FA                     
  2321                           ;main.c: 147:                 display4 = dado4;
  2322   0007FA  C044  F04A         	movff	_dado4,_display4
  2323                           
  2324                           ;main.c: 148:                 break;
  2325   0007FE  EF57  F004         	goto	i2l1496
  2326   000802                     i2l214:
  2327                           
  2328                           ;main.c: 151:                 dado2 = dado;
  2329   000802  C042  F046         	movff	read_keyboard@dado,_dado2
  2330   000806                     
  2331                           ;main.c: 152:                 duty_teclado[i] = dado2;
  2332   000806  5046               	movf	_dado2^0,w,c
  2333   000808  6E56               	movwf	??_read_keyboard^0,c
  2334   00080A  6A57               	clrf	(??_read_keyboard+1)^0,c
  2335   00080C  5048               	movf	_i^0,w,c
  2336   00080E  0D02               	mullw	2
  2337   000810  0E32               	movlw	low _duty_teclado
  2338   000812  24F3               	addwf	243,w,c
  2339   000814  6ED9               	movwf	fsr2l,c
  2340   000816  0E00               	movlw	high _duty_teclado
  2341   000818  20F4               	addwfc	prodh,w,c
  2342   00081A  6EDA               	movwf	fsr2h,c
  2343   00081C  C056  FFDE         	movff	??_read_keyboard,postinc2
  2344   000820  C057  FFDD         	movff	??_read_keyboard+1,postdec2
  2345   000824  EFF7  F003         	goto	i2l1454
  2346   000828                     i2l215:
  2347                           
  2348                           ;main.c: 160:                 dado3 = dado;
  2349   000828  C042  F045         	movff	read_keyboard@dado,_dado3
  2350   00082C                     
  2351                           ;main.c: 161:                 duty_teclado[i] = dado3;
  2352   00082C  5045               	movf	_dado3^0,w,c
  2353   00082E  6E56               	movwf	??_read_keyboard^0,c
  2354   000830  6A57               	clrf	(??_read_keyboard+1)^0,c
  2355   000832  5048               	movf	_i^0,w,c
  2356   000834  0D02               	mullw	2
  2357   000836  0E32               	movlw	low _duty_teclado
  2358   000838  24F3               	addwf	243,w,c
  2359   00083A  6ED9               	movwf	fsr2l,c
  2360   00083C  0E00               	movlw	high _duty_teclado
  2361   00083E  20F4               	addwfc	prodh,w,c
  2362   000840  6EDA               	movwf	fsr2h,c
  2363   000842  C056  FFDE         	movff	??_read_keyboard,postinc2
  2364   000846  C057  FFDD         	movff	??_read_keyboard+1,postdec2
  2365   00084A  EFF7  F003         	goto	i2l1454
  2366   00084E                     i2l216:
  2367                           
  2368                           ;main.c: 169:                 dado4 = dado;
  2369   00084E  C042  F044         	movff	read_keyboard@dado,_dado4
  2370   000852                     
  2371                           ;main.c: 170:                 duty_teclado[i] = dado4;
  2372   000852  5044               	movf	_dado4^0,w,c
  2373   000854  6E56               	movwf	??_read_keyboard^0,c
  2374   000856  6A57               	clrf	(??_read_keyboard+1)^0,c
  2375   000858  5048               	movf	_i^0,w,c
  2376   00085A  0D02               	mullw	2
  2377   00085C  0E32               	movlw	low _duty_teclado
  2378   00085E  24F3               	addwf	243,w,c
  2379   000860  6ED9               	movwf	fsr2l,c
  2380   000862  0E00               	movlw	high _duty_teclado
  2381   000864  20F4               	addwfc	prodh,w,c
  2382   000866  6EDA               	movwf	fsr2h,c
  2383   000868  C056  FFDE         	movff	??_read_keyboard,postinc2
  2384   00086C  C057  FFDD         	movff	??_read_keyboard+1,postdec2
  2385   000870  EFF7  F003         	goto	i2l1454
  2386   000874                     i2l1494:
  2387   000874  5048               	movf	_i^0,w,c
  2388   000876  6E56               	movwf	??_read_keyboard^0,c
  2389   000878  6A57               	clrf	(??_read_keyboard+1)^0,c
  2390                           
  2391                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2392                           ; Switch size 1, requested type "simple"
  2393                           ; Number of cases is 1, Range of values is 0 to 0
  2394                           ; switch strategies available:
  2395                           ; Name         Instructions Cycles
  2396                           ; simple_byte            4     3 (average)
  2397                           ;	Chosen strategy is simple_byte
  2398   00087A  5057               	movf	(??_read_keyboard+1)^0,w,c
  2399   00087C  0A00               	xorlw	0	; case 0
  2400   00087E  B4D8               	btfsc	status,2,c
  2401   000880  EF44  F004         	goto	i2l2168
  2402   000884  EF57  F004         	goto	i2l1496
  2403   000888                     i2l2168:
  2404                           
  2405                           ; Switch size 1, requested type "simple"
  2406                           ; Number of cases is 4, Range of values is 0 to 3
  2407                           ; switch strategies available:
  2408                           ; Name         Instructions Cycles
  2409                           ; simple_byte           13     7 (average)
  2410                           ;	Chosen strategy is simple_byte
  2411   000888  5056               	movf	??_read_keyboard^0,w,c
  2412   00088A  0A00               	xorlw	0	; case 0
  2413   00088C  B4D8               	btfsc	status,2,c
  2414   00088E  EFE6  F003         	goto	i2l212
  2415   000892  0A01               	xorlw	1	; case 1
  2416   000894  B4D8               	btfsc	status,2,c
  2417   000896  EF01  F004         	goto	i2l214
  2418   00089A  0A03               	xorlw	3	; case 2
  2419   00089C  B4D8               	btfsc	status,2,c
  2420   00089E  EF14  F004         	goto	i2l215
  2421   0008A2  0A01               	xorlw	1	; case 3
  2422   0008A4  B4D8               	btfsc	status,2,c
  2423   0008A6  EF27  F004         	goto	i2l216
  2424   0008AA  EF57  F004         	goto	i2l1496
  2425   0008AE                     i2l1496:
  2426                           
  2427                           ;main.c: 179:         if(i > 3) i = 0;
  2428   0008AE  0E03               	movlw	3
  2429   0008B0  6448               	cpfsgt	_i^0,c
  2430   0008B2  EF5D  F004         	goto	i2u32_41
  2431   0008B6  EF5F  F004         	goto	i2u32_40
  2432   0008BA                     i2u32_41:
  2433   0008BA  EF63  F004         	goto	i2l1500
  2434   0008BE                     i2u32_40:
  2435   0008BE  0E00               	movlw	0
  2436   0008C0  6E48               	movwf	_i^0,c
  2437   0008C2  EF64  F004         	goto	i2l1502
  2438   0008C6                     i2l1500:
  2439   0008C6  2A48               	incf	_i^0,f,c
  2440   0008C8                     i2l1502:
  2441                           
  2442                           ;main.c: 183:     memoria_dado = dado;
  2443   0008C8  C042  F043         	movff	read_keyboard@dado,_memoria_dado
  2444   0008CC  0012               	return		;funcret
  2445   0008CE                     __end_of_read_keyboard:
  2446                           	callstack 0
  2447                           
  2448 ;; *************** function _ler_teclado *****************
  2449 ;; Defined at:
  2450 ;;		line 15 in file "teclado.c"
  2451 ;; Parameters:    Size  Location     Type
  2452 ;;		None
  2453 ;; Auto vars:     Size  Location     Type
  2454 ;;  i               2    4[COMRAM] int 
  2455 ;;  i               2    2[COMRAM] int 
  2456 ;;  i               2    0[COMRAM] int 
  2457 ;;  entrada         1    7[COMRAM] unsigned char 
  2458 ;;  saida           1    6[COMRAM] unsigned char 
  2459 ;; Return value:  Size  Location     Type
  2460 ;;                  1    wreg      unsigned char 
  2461 ;; Registers used:
  2462 ;;		wreg, status,2, status,0
  2463 ;; Tracked objects:
  2464 ;;		On entry : 0/0
  2465 ;;		On exit  : 0/0
  2466 ;;		Unchanged: 0/0
  2467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2468 ;;      Params:         0       0       0       0       0       0       0
  2469 ;;      Locals:         8       0       0       0       0       0       0
  2470 ;;      Temps:          0       0       0       0       0       0       0
  2471 ;;      Totals:         8       0       0       0       0       0       0
  2472 ;;Total ram usage:        8 bytes
  2473 ;; Hardware stack levels used: 1
  2474 ;; This function calls:
  2475 ;;		Nothing
  2476 ;; This function is called by:
  2477 ;;		_read_keyboard
  2478 ;; This function uses a non-reentrant model
  2479 ;;
  2480                           
  2481                           	psect	text22
  2482   000616                     __ptext22:
  2483                           	callstack 0
  2484   000616                     _ler_teclado:
  2485                           	callstack 23
  2486   000616                     
  2487                           ;teclado.c: 18:     uint8_t entrada, saida=16;
  2488   000616  0E10               	movlw	16
  2489   000618  6E54               	movwf	ler_teclado@saida^0,c
  2490                           
  2491                           ;teclado.c: 20:     TRISB = 0b11111000;
  2492   00061A  0EF8               	movlw	248
  2493   00061C  6E93               	movwf	147,c	;volatile
  2494                           
  2495                           ;teclado.c: 21:     TRISD = 0b00001111;
  2496   00061E  0E0F               	movlw	15
  2497   000620  6E95               	movwf	149,c	;volatile
  2498   000622                     
  2499                           ;teclado.c: 23:     LATB |= 0b00000111;
  2500   000622  0E07               	movlw	7
  2501   000624  128A               	iorwf	138,f,c	;volatile
  2502   000626                     
  2503                           ;teclado.c: 25:     LATB ^= 0b00000001;
  2504   000626  0E01               	movlw	1
  2505   000628  1A8A               	xorwf	138,f,c	;volatile
  2506                           
  2507                           ;teclado.c: 26:     for (int i=0; i<10; i++) __nop();
  2508   00062A  0E00               	movlw	0
  2509   00062C  6E4F               	movwf	(ler_teclado@i+1)^0,c
  2510   00062E  0E00               	movlw	0
  2511   000630  6E4E               	movwf	ler_teclado@i^0,c
  2512   000632                     i2l420:
  2513   000632  F000               	nop	
  2514   000634  4A4E               	infsnz	ler_teclado@i^0,f,c
  2515   000636  2A4F               	incf	(ler_teclado@i+1)^0,f,c
  2516   000638  BE4F               	btfsc	(ler_teclado@i+1)^0,7,c
  2517   00063A  EF28  F003         	goto	i2u1_41
  2518   00063E  504F               	movf	(ler_teclado@i+1)^0,w,c
  2519   000640  E109               	bnz	i2u1_40
  2520   000642  0E0A               	movlw	10
  2521   000644  5C4E               	subwf	ler_teclado@i^0,w,c
  2522   000646  A0D8               	btfss	status,0,c
  2523   000648  EF28  F003         	goto	i2u1_41
  2524   00064C  EF2A  F003         	goto	i2u1_40
  2525   000650                     i2u1_41:
  2526   000650  EF19  F003         	goto	i2l420
  2527   000654                     i2u1_40:
  2528   000654                     
  2529                           ;teclado.c: 27:     entrada = PORTD;
  2530   000654  CF83 F055          	movff	3971,ler_teclado@entrada	;volatile
  2531                           
  2532                           ;teclado.c: 29:     if ((entrada & 1) == 0) saida=10;
  2533   000658  B055               	btfsc	ler_teclado@entrada^0,0,c
  2534   00065A  EF31  F003         	goto	i2u2_41
  2535   00065E  EF33  F003         	goto	i2u2_40
  2536   000662                     i2u2_41:
  2537   000662  EF35  F003         	goto	i2l1226
  2538   000666                     i2u2_40:
  2539   000666  0E0A               	movlw	10
  2540   000668  6E54               	movwf	ler_teclado@saida^0,c
  2541   00066A                     i2l1226:
  2542                           
  2543                           ;teclado.c: 30:     if ((entrada & 2) == 0) saida=7;
  2544   00066A  B255               	btfsc	ler_teclado@entrada^0,1,c
  2545   00066C  EF3A  F003         	goto	i2u3_41
  2546   000670  EF3C  F003         	goto	i2u3_40
  2547   000674                     i2u3_41:
  2548   000674  EF3E  F003         	goto	i2l1230
  2549   000678                     i2u3_40:
  2550   000678  0E07               	movlw	7
  2551   00067A  6E54               	movwf	ler_teclado@saida^0,c
  2552   00067C                     i2l1230:
  2553                           
  2554                           ;teclado.c: 31:     if ((entrada & 4) == 0) saida=4;
  2555   00067C  B455               	btfsc	ler_teclado@entrada^0,2,c
  2556   00067E  EF43  F003         	goto	i2u4_41
  2557   000682  EF45  F003         	goto	i2u4_40
  2558   000686                     i2u4_41:
  2559   000686  EF47  F003         	goto	i2l1234
  2560   00068A                     i2u4_40:
  2561   00068A  0E04               	movlw	4
  2562   00068C  6E54               	movwf	ler_teclado@saida^0,c
  2563   00068E                     i2l1234:
  2564                           
  2565                           ;teclado.c: 32:     if ((entrada & 8) == 0) saida=1;
  2566   00068E  B655               	btfsc	ler_teclado@entrada^0,3,c
  2567   000690  EF4C  F003         	goto	i2u5_41
  2568   000694  EF4E  F003         	goto	i2u5_40
  2569   000698                     i2u5_41:
  2570   000698  EF50  F003         	goto	i2l1238
  2571   00069C                     i2u5_40:
  2572   00069C  0E01               	movlw	1
  2573   00069E  6E54               	movwf	ler_teclado@saida^0,c
  2574   0006A0                     i2l1238:
  2575                           
  2576                           ;teclado.c: 34:     LATB ^= 0b00000011;
  2577   0006A0  0E03               	movlw	3
  2578   0006A2  1A8A               	xorwf	138,f,c	;volatile
  2579   0006A4                     
  2580                           ;teclado.c: 35:     for (int i=0; i<10; i++) __nop();
  2581   0006A4  0E00               	movlw	0
  2582   0006A6  6E51               	movwf	(ler_teclado@i_379+1)^0,c
  2583   0006A8  0E00               	movlw	0
  2584   0006AA  6E50               	movwf	ler_teclado@i_379^0,c
  2585   0006AC                     i2l426:
  2586   0006AC  F000               	nop	
  2587   0006AE  4A50               	infsnz	ler_teclado@i_379^0,f,c
  2588   0006B0  2A51               	incf	(ler_teclado@i_379+1)^0,f,c
  2589   0006B2  BE51               	btfsc	(ler_teclado@i_379+1)^0,7,c
  2590   0006B4  EF65  F003         	goto	i2u6_41
  2591   0006B8  5051               	movf	(ler_teclado@i_379+1)^0,w,c
  2592   0006BA  E109               	bnz	i2u6_40
  2593   0006BC  0E0A               	movlw	10
  2594   0006BE  5C50               	subwf	ler_teclado@i_379^0,w,c
  2595   0006C0  A0D8               	btfss	status,0,c
  2596   0006C2  EF65  F003         	goto	i2u6_41
  2597   0006C6  EF67  F003         	goto	i2u6_40
  2598   0006CA                     i2u6_41:
  2599   0006CA  EF56  F003         	goto	i2l426
  2600   0006CE                     i2u6_40:
  2601   0006CE                     
  2602                           ;teclado.c: 36:     entrada = PORTD;
  2603   0006CE  CF83 F055          	movff	3971,ler_teclado@entrada	;volatile
  2604                           
  2605                           ;teclado.c: 38:     if ((entrada & 1) == 0) saida=0;
  2606   0006D2  B055               	btfsc	ler_teclado@entrada^0,0,c
  2607   0006D4  EF6E  F003         	goto	i2u7_41
  2608   0006D8  EF70  F003         	goto	i2u7_40
  2609   0006DC                     i2u7_41:
  2610   0006DC  EF72  F003         	goto	i2l1250
  2611   0006E0                     i2u7_40:
  2612   0006E0  0E00               	movlw	0
  2613   0006E2  6E54               	movwf	ler_teclado@saida^0,c
  2614   0006E4                     i2l1250:
  2615                           
  2616                           ;teclado.c: 39:     if ((entrada & 2) == 0) saida=8;
  2617   0006E4  B255               	btfsc	ler_teclado@entrada^0,1,c
  2618   0006E6  EF77  F003         	goto	i2u8_41
  2619   0006EA  EF79  F003         	goto	i2u8_40
  2620   0006EE                     i2u8_41:
  2621   0006EE  EF7B  F003         	goto	i2l1254
  2622   0006F2                     i2u8_40:
  2623   0006F2  0E08               	movlw	8
  2624   0006F4  6E54               	movwf	ler_teclado@saida^0,c
  2625   0006F6                     i2l1254:
  2626                           
  2627                           ;teclado.c: 40:     if ((entrada & 4) == 0) saida=5;
  2628   0006F6  B455               	btfsc	ler_teclado@entrada^0,2,c
  2629   0006F8  EF80  F003         	goto	i2u9_41
  2630   0006FC  EF82  F003         	goto	i2u9_40
  2631   000700                     i2u9_41:
  2632   000700  EF84  F003         	goto	i2l1258
  2633   000704                     i2u9_40:
  2634   000704  0E05               	movlw	5
  2635   000706  6E54               	movwf	ler_teclado@saida^0,c
  2636   000708                     i2l1258:
  2637                           
  2638                           ;teclado.c: 41:     if ((entrada & 8) == 0) saida=2;
  2639   000708  B655               	btfsc	ler_teclado@entrada^0,3,c
  2640   00070A  EF89  F003         	goto	i2u10_41
  2641   00070E  EF8B  F003         	goto	i2u10_40
  2642   000712                     i2u10_41:
  2643   000712  EF8D  F003         	goto	i2l1262
  2644   000716                     i2u10_40:
  2645   000716  0E02               	movlw	2
  2646   000718  6E54               	movwf	ler_teclado@saida^0,c
  2647   00071A                     i2l1262:
  2648                           
  2649                           ;teclado.c: 43:     LATB ^= 0b00000110;
  2650   00071A  0E06               	movlw	6
  2651   00071C  1A8A               	xorwf	138,f,c	;volatile
  2652   00071E                     
  2653                           ;teclado.c: 44:     for (int i=0; i<10; i++) __nop();
  2654   00071E  0E00               	movlw	0
  2655   000720  6E53               	movwf	(ler_teclado@i_380+1)^0,c
  2656   000722  0E00               	movlw	0
  2657   000724  6E52               	movwf	ler_teclado@i_380^0,c
  2658   000726                     i2l432:
  2659   000726  F000               	nop	
  2660   000728  4A52               	infsnz	ler_teclado@i_380^0,f,c
  2661   00072A  2A53               	incf	(ler_teclado@i_380+1)^0,f,c
  2662   00072C  BE53               	btfsc	(ler_teclado@i_380+1)^0,7,c
  2663   00072E  EFA2  F003         	goto	i2u11_41
  2664   000732  5053               	movf	(ler_teclado@i_380+1)^0,w,c
  2665   000734  E109               	bnz	i2u11_40
  2666   000736  0E0A               	movlw	10
  2667   000738  5C52               	subwf	ler_teclado@i_380^0,w,c
  2668   00073A  A0D8               	btfss	status,0,c
  2669   00073C  EFA2  F003         	goto	i2u11_41
  2670   000740  EFA4  F003         	goto	i2u11_40
  2671   000744                     i2u11_41:
  2672   000744  EF93  F003         	goto	i2l432
  2673   000748                     i2u11_40:
  2674   000748                     
  2675                           ;teclado.c: 45:     entrada = PORTD;
  2676   000748  CF83 F055          	movff	3971,ler_teclado@entrada	;volatile
  2677                           
  2678                           ;teclado.c: 47:     if ((entrada & 1) == 0) saida=11;
  2679   00074C  B055               	btfsc	ler_teclado@entrada^0,0,c
  2680   00074E  EFAB  F003         	goto	i2u12_41
  2681   000752  EFAD  F003         	goto	i2u12_40
  2682   000756                     i2u12_41:
  2683   000756  EFAF  F003         	goto	i2l1274
  2684   00075A                     i2u12_40:
  2685   00075A  0E0B               	movlw	11
  2686   00075C  6E54               	movwf	ler_teclado@saida^0,c
  2687   00075E                     i2l1274:
  2688                           
  2689                           ;teclado.c: 48:     if ((entrada & 2) == 0) saida=9;
  2690   00075E  B255               	btfsc	ler_teclado@entrada^0,1,c
  2691   000760  EFB4  F003         	goto	i2u13_41
  2692   000764  EFB6  F003         	goto	i2u13_40
  2693   000768                     i2u13_41:
  2694   000768  EFB8  F003         	goto	i2l1278
  2695   00076C                     i2u13_40:
  2696   00076C  0E09               	movlw	9
  2697   00076E  6E54               	movwf	ler_teclado@saida^0,c
  2698   000770                     i2l1278:
  2699                           
  2700                           ;teclado.c: 49:     if ((entrada & 4) == 0) saida=6;
  2701   000770  B455               	btfsc	ler_teclado@entrada^0,2,c
  2702   000772  EFBD  F003         	goto	i2u14_41
  2703   000776  EFBF  F003         	goto	i2u14_40
  2704   00077A                     i2u14_41:
  2705   00077A  EFC1  F003         	goto	i2l1282
  2706   00077E                     i2u14_40:
  2707   00077E  0E06               	movlw	6
  2708   000780  6E54               	movwf	ler_teclado@saida^0,c
  2709   000782                     i2l1282:
  2710                           
  2711                           ;teclado.c: 50:     if ((entrada & 8) == 0) saida=3;
  2712   000782  B655               	btfsc	ler_teclado@entrada^0,3,c
  2713   000784  EFC6  F003         	goto	i2u15_41
  2714   000788  EFC8  F003         	goto	i2u15_40
  2715   00078C                     i2u15_41:
  2716   00078C  EFCA  F003         	goto	i2l1286
  2717   000790                     i2u15_40:
  2718   000790  0E03               	movlw	3
  2719   000792  6E54               	movwf	ler_teclado@saida^0,c
  2720   000794                     i2l1286:
  2721                           
  2722                           ;teclado.c: 52:     TRISB = 0b11111111;
  2723   000794  6893               	setf	147,c	;volatile
  2724                           
  2725                           ;teclado.c: 53:     TRISD = 0b00000000;
  2726   000796  0E00               	movlw	0
  2727   000798  6E95               	movwf	149,c	;volatile
  2728                           
  2729                           ;teclado.c: 55:     return saida;
  2730   00079A  5054               	movf	ler_teclado@saida^0,w,c
  2731   00079C  0012               	return		;funcret
  2732   00079E                     __end_of_ler_teclado:
  2733                           	callstack 0
  2734                           
  2735 ;; *************** function _read_keyb *****************
  2736 ;; Defined at:
  2737 ;;		line 50 in file "main.c"
  2738 ;; Parameters:    Size  Location     Type
  2739 ;;		None
  2740 ;; Auto vars:     Size  Location     Type
  2741 ;;  dado            1   15[COMRAM] unsigned char 
  2742 ;;  dado_RB5        1   14[COMRAM] unsigned char 
  2743 ;;  dado_RB4        1   13[COMRAM] unsigned char 
  2744 ;;  dado_RB3        1   12[COMRAM] unsigned char 
  2745 ;; Return value:  Size  Location     Type
  2746 ;;                  1    wreg      void 
  2747 ;; Registers used:
  2748 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  2749 ;; Tracked objects:
  2750 ;;		On entry : 0/0
  2751 ;;		On exit  : 0/0
  2752 ;;		Unchanged: 0/0
  2753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2754 ;;      Params:         0       0       0       0       0       0       0
  2755 ;;      Locals:         4       0       0       0       0       0       0
  2756 ;;      Temps:          0       0       0       0       0       0       0
  2757 ;;      Totals:         4       0       0       0       0       0       0
  2758 ;;Total ram usage:        4 bytes
  2759 ;; Hardware stack levels used: 1
  2760 ;; Hardware stack levels required when called: 2
  2761 ;; This function calls:
  2762 ;;		_f_int0
  2763 ;;		_f_int1
  2764 ;;		_f_int2
  2765 ;; This function is called by:
  2766 ;;		_f_timers
  2767 ;; This function uses a non-reentrant model
  2768 ;;
  2769                           
  2770                           	psect	text23
  2771   000C22                     __ptext23:
  2772                           	callstack 0
  2773   000C22                     _read_keyb:
  2774                           	callstack 22
  2775   000C22                     
  2776                           ;main.c: 52:     uint8_t dado, dado_RB3, dado_RB4, dado_RB5;;main.c: 54:     static uint
      +                          8_t m_dado_RB3 = 1, m_dado_RB4 = 1, m_dado_RB5 = 1;;main.c: 56:     dado = PORTB;
  2777   000C22  CF81 F05D          	movff	3969,read_keyb@dado	;volatile
  2778                           
  2779                           ;main.c: 59:     if (dado & 0b00001000)
  2780   000C26  A65D               	btfss	read_keyb@dado^0,3,c
  2781   000C28  EF18  F006         	goto	i2u55_41
  2782   000C2C  EF1A  F006         	goto	i2u55_40
  2783   000C30                     i2u55_41:
  2784   000C30  EF1E  F006         	goto	i2l1820
  2785   000C34                     i2u55_40:
  2786   000C34                     
  2787                           ;main.c: 60:     {;main.c: 61:         dado_RB3 = 1;
  2788   000C34  0E01               	movlw	1
  2789   000C36  6E5A               	movwf	read_keyb@dado_RB3^0,c
  2790                           
  2791                           ;main.c: 62:     }
  2792   000C38  EF20  F006         	goto	i2l1822
  2793   000C3C                     i2l1820:
  2794                           
  2795                           ;main.c: 64:     {;main.c: 65:         dado_RB3 = 0;
  2796   000C3C  0E00               	movlw	0
  2797   000C3E  6E5A               	movwf	read_keyb@dado_RB3^0,c
  2798   000C40                     i2l1822:
  2799                           
  2800                           ;main.c: 67:     if (dado & 0b00010000)
  2801   000C40  A85D               	btfss	read_keyb@dado^0,4,c
  2802   000C42  EF25  F006         	goto	i2u56_41
  2803   000C46  EF27  F006         	goto	i2u56_40
  2804   000C4A                     i2u56_41:
  2805   000C4A  EF2B  F006         	goto	i2l1826
  2806   000C4E                     i2u56_40:
  2807   000C4E                     
  2808                           ;main.c: 68:     {;main.c: 69:         dado_RB4 = 1;
  2809   000C4E  0E01               	movlw	1
  2810   000C50  6E5B               	movwf	read_keyb@dado_RB4^0,c
  2811                           
  2812                           ;main.c: 70:     }
  2813   000C52  EF2D  F006         	goto	i2l1828
  2814   000C56                     i2l1826:
  2815                           
  2816                           ;main.c: 73:     {;main.c: 74:         dado_RB4 = 0;
  2817   000C56  0E00               	movlw	0
  2818   000C58  6E5B               	movwf	read_keyb@dado_RB4^0,c
  2819   000C5A                     i2l1828:
  2820                           
  2821                           ;main.c: 77:     if (dado & 0b00100000)
  2822   000C5A  AA5D               	btfss	read_keyb@dado^0,5,c
  2823   000C5C  EF32  F006         	goto	i2u57_41
  2824   000C60  EF34  F006         	goto	i2u57_40
  2825   000C64                     i2u57_41:
  2826   000C64  EF38  F006         	goto	i2l1832
  2827   000C68                     i2u57_40:
  2828   000C68                     
  2829                           ;main.c: 78:     {;main.c: 79:         dado_RB5 = 1;
  2830   000C68  0E01               	movlw	1
  2831   000C6A  6E5C               	movwf	read_keyb@dado_RB5^0,c
  2832                           
  2833                           ;main.c: 80:     }
  2834   000C6C  EF3A  F006         	goto	i2l1834
  2835   000C70                     i2l1832:
  2836                           
  2837                           ;main.c: 83:     {;main.c: 84:         dado_RB5=0;
  2838   000C70  0E00               	movlw	0
  2839   000C72  6E5C               	movwf	read_keyb@dado_RB5^0,c
  2840   000C74                     i2l1834:
  2841                           
  2842                           ;main.c: 87:     if (dado_RB3< m_dado_RB3)
  2843   000C74  502D               	movf	read_keyb@m_dado_RB3^0,w,c
  2844   000C76  5C5A               	subwf	read_keyb@dado_RB3^0,w,c
  2845   000C78  B0D8               	btfsc	status,0,c
  2846   000C7A  EF41  F006         	goto	i2u58_41
  2847   000C7E  EF43  F006         	goto	i2u58_40
  2848   000C82                     i2u58_41:
  2849   000C82  EF45  F006         	goto	i2l1838
  2850   000C86                     i2u58_40:
  2851   000C86                     
  2852                           ;main.c: 88:     {;main.c: 89:         f_int0();
  2853   000C86  EC31  F008         	call	_f_int0	;wreg free
  2854   000C8A                     i2l1838:
  2855                           
  2856                           ;main.c: 92:     if (dado_RB4 < m_dado_RB4)
  2857   000C8A  502C               	movf	read_keyb@m_dado_RB4^0,w,c
  2858   000C8C  5C5B               	subwf	read_keyb@dado_RB4^0,w,c
  2859   000C8E  B0D8               	btfsc	status,0,c
  2860   000C90  EF4C  F006         	goto	i2u59_41
  2861   000C94  EF4E  F006         	goto	i2u59_40
  2862   000C98                     i2u59_41:
  2863   000C98  EF50  F006         	goto	i2l1842
  2864   000C9C                     i2u59_40:
  2865   000C9C                     
  2866                           ;main.c: 93:     {;main.c: 94:         f_int1();
  2867   000C9C  EC45  F009         	call	_f_int1	;wreg free
  2868   000CA0                     i2l1842:
  2869                           
  2870                           ;main.c: 97:     if (dado_RB5 < m_dado_RB5)
  2871   000CA0  502B               	movf	read_keyb@m_dado_RB5^0,w,c
  2872   000CA2  5C5C               	subwf	read_keyb@dado_RB5^0,w,c
  2873   000CA4  B0D8               	btfsc	status,0,c
  2874   000CA6  EF57  F006         	goto	i2u60_41
  2875   000CAA  EF59  F006         	goto	i2u60_40
  2876   000CAE                     i2u60_41:
  2877   000CAE  EF5B  F006         	goto	i2l1846
  2878   000CB2                     i2u60_40:
  2879   000CB2                     
  2880                           ;main.c: 98:     {;main.c: 99:         f_int2();
  2881   000CB2  EC62  F006         	call	_f_int2	;wreg free
  2882   000CB6                     i2l1846:
  2883                           
  2884                           ;main.c: 103:     m_dado_RB3 = dado_RB3;
  2885   000CB6  C05A  F02D         	movff	read_keyb@dado_RB3,read_keyb@m_dado_RB3
  2886   000CBA                     
  2887                           ;main.c: 104:     m_dado_RB4 = dado_RB4;
  2888   000CBA  C05B  F02C         	movff	read_keyb@dado_RB4,read_keyb@m_dado_RB4
  2889   000CBE                     
  2890                           ;main.c: 105:     m_dado_RB5 = dado_RB5;
  2891   000CBE  C05C  F02B         	movff	read_keyb@dado_RB5,read_keyb@m_dado_RB5
  2892   000CC2  0012               	return		;funcret
  2893   000CC4                     __end_of_read_keyb:
  2894                           	callstack 0
  2895                           
  2896 ;; *************** function _f_int2 *****************
  2897 ;; Defined at:
  2898 ;;		line 205 in file "main.c"
  2899 ;; Parameters:    Size  Location     Type
  2900 ;;		None
  2901 ;; Auto vars:     Size  Location     Type
  2902 ;;		None
  2903 ;; Return value:  Size  Location     Type
  2904 ;;                  1    wreg      void 
  2905 ;; Registers used:
  2906 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  2907 ;; Tracked objects:
  2908 ;;		On entry : 0/0
  2909 ;;		On exit  : 0/0
  2910 ;;		Unchanged: 0/0
  2911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2912 ;;      Params:         0       0       0       0       0       0       0
  2913 ;;      Locals:         0       0       0       0       0       0       0
  2914 ;;      Temps:          6       0       0       0       0       0       0
  2915 ;;      Totals:         6       0       0       0       0       0       0
  2916 ;;Total ram usage:        6 bytes
  2917 ;; Hardware stack levels used: 1
  2918 ;; Hardware stack levels required when called: 1
  2919 ;; This function calls:
  2920 ;;		___wmul
  2921 ;;		_f_pwm
  2922 ;; This function is called by:
  2923 ;;		_read_keyb
  2924 ;; This function uses a non-reentrant model
  2925 ;;
  2926                           
  2927                           	psect	text24
  2928   000CC4                     __ptext24:
  2929                           	callstack 0
  2930   000CC4                     _f_int2:
  2931                           	callstack 22
  2932   000CC4                     
  2933                           ;main.c: 207:     static uint16_t duty_normalized = 0;;main.c: 208:     duty_AD = 0;
  2934   000CC4  0E00               	movlw	0
  2935   000CC6  6E49               	movwf	_duty_AD^0,c
  2936   000CC8                     
  2937                           ;main.c: 209:     duty_normalized = duty_teclado[0]*1000 + duty_teclado[1]*100 + duty_te
      +                          clado[2]*10 + duty_teclado[3];
  2938   000CC8  C032  F04E         	movff	_duty_teclado,___wmul@multiplier
  2939   000CCC  C033  F04F         	movff	_duty_teclado+1,___wmul@multiplier+1
  2940   000CD0  0E03               	movlw	3
  2941   000CD2  6E51               	movwf	(___wmul@multiplicand+1)^0,c
  2942   000CD4  0EE8               	movlw	232
  2943   000CD6  6E50               	movwf	___wmul@multiplicand^0,c
  2944   000CD8  ECC1  F008         	call	___wmul	;wreg free
  2945   000CDC  C04E  F054         	movff	?___wmul,??_f_int2
  2946   000CE0  C04F  F055         	movff	?___wmul+1,??_f_int2+1
  2947   000CE4  C034  F04E         	movff	_duty_teclado+2,___wmul@multiplier
  2948   000CE8  C035  F04F         	movff	_duty_teclado+3,___wmul@multiplier+1
  2949   000CEC  0E00               	movlw	0
  2950   000CEE  6E51               	movwf	(___wmul@multiplicand+1)^0,c
  2951   000CF0  0E64               	movlw	100
  2952   000CF2  6E50               	movwf	___wmul@multiplicand^0,c
  2953   000CF4  ECC1  F008         	call	___wmul	;wreg free
  2954   000CF8  504E               	movf	?___wmul^0,w,c
  2955   000CFA  2454               	addwf	??_f_int2^0,w,c
  2956   000CFC  6E56               	movwf	(??_f_int2+2)^0,c
  2957   000CFE  504F               	movf	(?___wmul+1)^0,w,c
  2958   000D00  2055               	addwfc	(??_f_int2+1)^0,w,c
  2959   000D02  6E57               	movwf	(??_f_int2+3)^0,c
  2960   000D04  C036  F04E         	movff	_duty_teclado+4,___wmul@multiplier
  2961   000D08  C037  F04F         	movff	_duty_teclado+5,___wmul@multiplier+1
  2962   000D0C  0E00               	movlw	0
  2963   000D0E  6E51               	movwf	(___wmul@multiplicand+1)^0,c
  2964   000D10  0E0A               	movlw	10
  2965   000D12  6E50               	movwf	___wmul@multiplicand^0,c
  2966   000D14  ECC1  F008         	call	___wmul	;wreg free
  2967   000D18  504E               	movf	?___wmul^0,w,c
  2968   000D1A  2456               	addwf	(??_f_int2+2)^0,w,c
  2969   000D1C  6E58               	movwf	(??_f_int2+4)^0,c
  2970   000D1E  504F               	movf	(?___wmul+1)^0,w,c
  2971   000D20  2057               	addwfc	(??_f_int2+3)^0,w,c
  2972   000D22  6E59               	movwf	(??_f_int2+5)^0,c
  2973   000D24  5038               	movf	(_duty_teclado+6)^0,w,c
  2974   000D26  2458               	addwf	(??_f_int2+4)^0,w,c
  2975   000D28  6E3A               	movwf	f_int2@duty_normalized^0,c
  2976   000D2A  5039               	movf	(_duty_teclado+7)^0,w,c
  2977   000D2C  2059               	addwfc	(??_f_int2+5)^0,w,c
  2978   000D2E  6E3B               	movwf	(f_int2@duty_normalized+1)^0,c
  2979   000D30                     
  2980                           ;main.c: 210:     duty_LCD1 = '0' + duty_teclado[0];
  2981   000D30  5032               	movf	_duty_teclado^0,w,c
  2982   000D32  0F30               	addlw	48
  2983   000D34  6E31               	movwf	_duty_LCD1^0,c
  2984   000D36                     
  2985                           ;main.c: 211:     duty_LCD2 = '0' + duty_teclado[1];
  2986   000D36  5034               	movf	(_duty_teclado+2)^0,w,c
  2987   000D38  0F30               	addlw	48
  2988   000D3A  6E30               	movwf	_duty_LCD2^0,c
  2989   000D3C                     
  2990                           ;main.c: 212:     duty_LCD3 = '0' + duty_teclado[2];
  2991   000D3C  5036               	movf	(_duty_teclado+4)^0,w,c
  2992   000D3E  0F30               	addlw	48
  2993   000D40  6E2F               	movwf	_duty_LCD3^0,c
  2994   000D42                     
  2995                           ;main.c: 213:     duty_LCD4 = '0' + duty_teclado[3];
  2996   000D42  5038               	movf	(_duty_teclado+6)^0,w,c
  2997   000D44  0F30               	addlw	48
  2998   000D46  6E2E               	movwf	_duty_LCD4^0,c
  2999   000D48                     
  3000                           ;main.c: 214:     f_pwm(duty_normalized);
  3001   000D48  C03A  F04E         	movff	f_int2@duty_normalized,f_pwm@duty
  3002   000D4C  C03B  F04F         	movff	f_int2@duty_normalized+1,f_pwm@duty+1
  3003   000D50  EC85  F008         	call	_f_pwm	;wreg free
  3004   000D54  0012               	return		;funcret
  3005   000D56                     __end_of_f_int2:
  3006                           	callstack 0
  3007                           
  3008 ;; *************** function ___wmul *****************
  3009 ;; Defined at:
  3010 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\Umul16.c"
  3011 ;; Parameters:    Size  Location     Type
  3012 ;;  multiplier      2    0[COMRAM] unsigned int 
  3013 ;;  multiplicand    2    2[COMRAM] unsigned int 
  3014 ;; Auto vars:     Size  Location     Type
  3015 ;;  product         2    4[COMRAM] unsigned int 
  3016 ;; Return value:  Size  Location     Type
  3017 ;;                  2    0[COMRAM] unsigned int 
  3018 ;; Registers used:
  3019 ;;		wreg, status,2, status,0, prodl, prodh
  3020 ;; Tracked objects:
  3021 ;;		On entry : 0/0
  3022 ;;		On exit  : 0/0
  3023 ;;		Unchanged: 0/0
  3024 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3025 ;;      Params:         4       0       0       0       0       0       0
  3026 ;;      Locals:         2       0       0       0       0       0       0
  3027 ;;      Temps:          0       0       0       0       0       0       0
  3028 ;;      Totals:         6       0       0       0       0       0       0
  3029 ;;Total ram usage:        6 bytes
  3030 ;; Hardware stack levels used: 1
  3031 ;; This function calls:
  3032 ;;		Nothing
  3033 ;; This function is called by:
  3034 ;;		_f_int2
  3035 ;; This function uses a non-reentrant model
  3036 ;;
  3037                           
  3038                           	psect	text25
  3039   001182                     __ptext25:
  3040                           	callstack 0
  3041   001182                     ___wmul:
  3042                           	callstack 22
  3043   001182  504E               	movf	___wmul@multiplier^0,w,c
  3044   001184  0250               	mulwf	___wmul@multiplicand^0,c
  3045   001186  CFF3 F052          	movff	prodl,___wmul@product
  3046   00118A  CFF4 F053          	movff	prodh,___wmul@product+1
  3047   00118E  504E               	movf	___wmul@multiplier^0,w,c
  3048   001190  0251               	mulwf	(___wmul@multiplicand+1)^0,c
  3049   001192  50F3               	movf	243,w,c
  3050   001194  2653               	addwf	(___wmul@product+1)^0,f,c
  3051   001196  504F               	movf	(___wmul@multiplier+1)^0,w,c
  3052   001198  0250               	mulwf	___wmul@multiplicand^0,c
  3053   00119A  50F3               	movf	243,w,c
  3054   00119C  2653               	addwf	(___wmul@product+1)^0,f,c
  3055   00119E  C052  F04E         	movff	___wmul@product,?___wmul
  3056   0011A2  C053  F04F         	movff	___wmul@product+1,?___wmul+1
  3057   0011A6  0012               	return		;funcret
  3058   0011A8                     __end_of___wmul:
  3059                           	callstack 0
  3060                           
  3061 ;; *************** function _f_int1 *****************
  3062 ;; Defined at:
  3063 ;;		line 200 in file "main.c"
  3064 ;; Parameters:    Size  Location     Type
  3065 ;;		None
  3066 ;; Auto vars:     Size  Location     Type
  3067 ;;		None
  3068 ;; Return value:  Size  Location     Type
  3069 ;;                  1    wreg      void 
  3070 ;; Registers used:
  3071 ;;		wreg, status,2
  3072 ;; Tracked objects:
  3073 ;;		On entry : 0/0
  3074 ;;		On exit  : 0/0
  3075 ;;		Unchanged: 0/0
  3076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3077 ;;      Params:         0       0       0       0       0       0       0
  3078 ;;      Locals:         0       0       0       0       0       0       0
  3079 ;;      Temps:          0       0       0       0       0       0       0
  3080 ;;      Totals:         0       0       0       0       0       0       0
  3081 ;;Total ram usage:        0 bytes
  3082 ;; Hardware stack levels used: 1
  3083 ;; This function calls:
  3084 ;;		Nothing
  3085 ;; This function is called by:
  3086 ;;		_read_keyb
  3087 ;; This function uses a non-reentrant model
  3088 ;;
  3089                           
  3090                           	psect	text26
  3091   00128A                     __ptext26:
  3092                           	callstack 0
  3093   00128A                     _f_int1:
  3094                           	callstack 23
  3095   00128A                     
  3096                           ;main.c: 202:     duty_AD = 1;
  3097   00128A  0E01               	movlw	1
  3098   00128C  6E49               	movwf	_duty_AD^0,c
  3099   00128E  0012               	return		;funcret
  3100   001290                     __end_of_f_int1:
  3101                           	callstack 0
  3102                           
  3103 ;; *************** function _f_int0 *****************
  3104 ;; Defined at:
  3105 ;;		line 186 in file "main.c"
  3106 ;; Parameters:    Size  Location     Type
  3107 ;;		None
  3108 ;; Auto vars:     Size  Location     Type
  3109 ;;		None
  3110 ;; Return value:  Size  Location     Type
  3111 ;;                  1    wreg      void 
  3112 ;; Registers used:
  3113 ;;		wreg, status,2, status,0, cstack
  3114 ;; Tracked objects:
  3115 ;;		On entry : 0/0
  3116 ;;		On exit  : 0/0
  3117 ;;		Unchanged: 0/0
  3118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3119 ;;      Params:         0       0       0       0       0       0       0
  3120 ;;      Locals:         0       0       0       0       0       0       0
  3121 ;;      Temps:          0       0       0       0       0       0       0
  3122 ;;      Totals:         0       0       0       0       0       0       0
  3123 ;;Total ram usage:        0 bytes
  3124 ;; Hardware stack levels used: 1
  3125 ;; Hardware stack levels required when called: 1
  3126 ;; This function calls:
  3127 ;;		_f_pwm
  3128 ;; This function is called by:
  3129 ;;		_read_keyb
  3130 ;; This function uses a non-reentrant model
  3131 ;;
  3132                           
  3133                           	psect	text27
  3134   001062                     __ptext27:
  3135                           	callstack 0
  3136   001062                     _f_int0:
  3137                           	callstack 22
  3138   001062                     
  3139                           ;main.c: 188:     display1 = display2= display3 = display4 = 0;
  3140   001062  0E00               	movlw	0
  3141   001064  6E4A               	movwf	_display4^0,c
  3142   001066  C04A  F04B         	movff	_display4,_display3
  3143   00106A  C04B  F04C         	movff	_display3,_display2
  3144   00106E  C04C  F04D         	movff	_display2,_display1
  3145   001072                     
  3146                           ;main.c: 189:     f_pwm(0);
  3147   001072  0E00               	movlw	0
  3148   001074  6E4F               	movwf	(f_pwm@duty+1)^0,c
  3149   001076  0E00               	movlw	0
  3150   001078  6E4E               	movwf	f_pwm@duty^0,c
  3151   00107A  EC85  F008         	call	_f_pwm	;wreg free
  3152   00107E                     
  3153                           ;main.c: 190:     duty_LCD1 = '0';
  3154   00107E  0E30               	movlw	48
  3155   001080  6E31               	movwf	_duty_LCD1^0,c
  3156   001082                     
  3157                           ;main.c: 191:     duty_LCD2 = '0';
  3158   001082  0E30               	movlw	48
  3159   001084  6E30               	movwf	_duty_LCD2^0,c
  3160   001086                     
  3161                           ;main.c: 192:     duty_LCD3 = '0';
  3162   001086  0E30               	movlw	48
  3163   001088  6E2F               	movwf	_duty_LCD3^0,c
  3164   00108A                     
  3165                           ;main.c: 193:     duty_LCD4 = '0';
  3166   00108A  0E30               	movlw	48
  3167   00108C  6E2E               	movwf	_duty_LCD4^0,c
  3168   00108E                     
  3169                           ;main.c: 194:     duty_AD = 0;
  3170   00108E  0E00               	movlw	0
  3171   001090  6E49               	movwf	_duty_AD^0,c
  3172   001092                     
  3173                           ;main.c: 195:     i = 0;
  3174   001092  0E00               	movlw	0
  3175   001094  6E48               	movwf	_i^0,c
  3176   001096                     
  3177                           ;main.c: 196:     dado1 = 0, dado2 = 0, dado3 = 0, dado4 = 0;
  3178   001096  0E00               	movlw	0
  3179   001098  6E47               	movwf	_dado1^0,c
  3180   00109A  0E00               	movlw	0
  3181   00109C  6E46               	movwf	_dado2^0,c
  3182   00109E  0E00               	movlw	0
  3183   0010A0  6E45               	movwf	_dado3^0,c
  3184   0010A2  0E00               	movlw	0
  3185   0010A4  6E44               	movwf	_dado4^0,c
  3186   0010A6                     
  3187                           ;main.c: 197:     memoria_dado = 0;
  3188   0010A6  0E00               	movlw	0
  3189   0010A8  6E43               	movwf	_memoria_dado^0,c
  3190   0010AA  0012               	return		;funcret
  3191   0010AC                     __end_of_f_int0:
  3192                           	callstack 0
  3193                           
  3194 ;; *************** function _mux_display *****************
  3195 ;; Defined at:
  3196 ;;		line 14 in file "Display.c"
  3197 ;; Parameters:    Size  Location     Type
  3198 ;;		None
  3199 ;; Auto vars:     Size  Location     Type
  3200 ;;		None
  3201 ;; Return value:  Size  Location     Type
  3202 ;;                  1    wreg      void 
  3203 ;; Registers used:
  3204 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3205 ;; Tracked objects:
  3206 ;;		On entry : 0/0
  3207 ;;		On exit  : 0/0
  3208 ;;		Unchanged: 0/0
  3209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3210 ;;      Params:         0       0       0       0       0       0       0
  3211 ;;      Locals:         0       0       0       0       0       0       0
  3212 ;;      Temps:          2       0       0       0       0       0       0
  3213 ;;      Totals:         2       0       0       0       0       0       0
  3214 ;;Total ram usage:        2 bytes
  3215 ;; Hardware stack levels used: 1
  3216 ;; This function calls:
  3217 ;;		Nothing
  3218 ;; This function is called by:
  3219 ;;		_f_timers
  3220 ;; This function uses a non-reentrant model
  3221 ;;
  3222                           
  3223                           	psect	text28
  3224   000AC4                     __ptext28:
  3225                           	callstack 0
  3226   000AC4                     _mux_display:
  3227                           	callstack 24
  3228   000AC4                     
  3229                           ;Display.c: 15:     static uint8_t estado = 0;;Display.c: 17:     switch (estado) {
  3230   000AC4  EF9C  F005         	goto	i2l1534
  3231   000AC8                     i2l372:
  3232                           
  3233                           ;Display.c: 19:             LATA2 = 1;
  3234   000AC8  8489               	bsf	3977,2,c	;volatile
  3235                           
  3236                           ;Display.c: 20:             LATA5 = 0;
  3237   000ACA  9A89               	bcf	3977,5,c	;volatile
  3238   000ACC                     
  3239                           ;Display.c: 21:             LATD = conv7seg[display1];
  3240   000ACC  0E01               	movlw	low _conv7seg
  3241   000ACE  244D               	addwf	_display1^0,w,c
  3242   000AD0  6ED9               	movwf	fsr2l,c
  3243   000AD2  6ADA               	clrf	fsr2h,c
  3244   000AD4  0E00               	movlw	high _conv7seg
  3245   000AD6  22DA               	addwfc	fsr2h,f,c
  3246   000AD8  50DF               	movf	indf2,w,c
  3247   000ADA  6E8C               	movwf	140,c	;volatile
  3248   000ADC                     
  3249                           ;Display.c: 22:             estado = 1;
  3250   000ADC  0E01               	movlw	1
  3251   000ADE  6E3F               	movwf	mux_display@estado^0,c
  3252                           
  3253                           ;Display.c: 23:             break;
  3254   000AE0  EFB9  F005         	goto	i2l377
  3255   000AE4                     i2l374:
  3256                           
  3257                           ;Display.c: 26:             LATA2 = 0;
  3258   000AE4  9489               	bcf	3977,2,c	;volatile
  3259                           
  3260                           ;Display.c: 27:             LATA3 = 1;
  3261   000AE6  8689               	bsf	3977,3,c	;volatile
  3262   000AE8                     
  3263                           ;Display.c: 28:             LATD = conv7seg[display2];
  3264   000AE8  0E01               	movlw	low _conv7seg
  3265   000AEA  244C               	addwf	_display2^0,w,c
  3266   000AEC  6ED9               	movwf	fsr2l,c
  3267   000AEE  6ADA               	clrf	fsr2h,c
  3268   000AF0  0E00               	movlw	high _conv7seg
  3269   000AF2  22DA               	addwfc	fsr2h,f,c
  3270   000AF4  50DF               	movf	indf2,w,c
  3271   000AF6  6E8C               	movwf	140,c	;volatile
  3272   000AF8                     
  3273                           ;Display.c: 29:             estado = 2;
  3274   000AF8  0E02               	movlw	2
  3275   000AFA  6E3F               	movwf	mux_display@estado^0,c
  3276                           
  3277                           ;Display.c: 30:             break;
  3278   000AFC  EFB9  F005         	goto	i2l377
  3279   000B00                     i2l375:
  3280                           
  3281                           ;Display.c: 33:             LATA3 = 0;
  3282   000B00  9689               	bcf	3977,3,c	;volatile
  3283                           
  3284                           ;Display.c: 34:             LATA4 = 1;
  3285   000B02  8889               	bsf	3977,4,c	;volatile
  3286   000B04                     
  3287                           ;Display.c: 35:             LATD = conv7seg[display3];
  3288   000B04  0E01               	movlw	low _conv7seg
  3289   000B06  244B               	addwf	_display3^0,w,c
  3290   000B08  6ED9               	movwf	fsr2l,c
  3291   000B0A  6ADA               	clrf	fsr2h,c
  3292   000B0C  0E00               	movlw	high _conv7seg
  3293   000B0E  22DA               	addwfc	fsr2h,f,c
  3294   000B10  50DF               	movf	indf2,w,c
  3295   000B12  6E8C               	movwf	140,c	;volatile
  3296   000B14                     
  3297                           ;Display.c: 36:             estado = 3;
  3298   000B14  0E03               	movlw	3
  3299   000B16  6E3F               	movwf	mux_display@estado^0,c
  3300                           
  3301                           ;Display.c: 37:             break;
  3302   000B18  EFB9  F005         	goto	i2l377
  3303   000B1C                     i2l376:
  3304                           
  3305                           ;Display.c: 40:             LATA4 = 0;
  3306   000B1C  9889               	bcf	3977,4,c	;volatile
  3307                           
  3308                           ;Display.c: 41:             LATA5 = 1;
  3309   000B1E  8A89               	bsf	3977,5,c	;volatile
  3310   000B20                     
  3311                           ;Display.c: 42:             LATD = conv7seg[display4];
  3312   000B20  0E01               	movlw	low _conv7seg
  3313   000B22  244A               	addwf	_display4^0,w,c
  3314   000B24  6ED9               	movwf	fsr2l,c
  3315   000B26  6ADA               	clrf	fsr2h,c
  3316   000B28  0E00               	movlw	high _conv7seg
  3317   000B2A  22DA               	addwfc	fsr2h,f,c
  3318   000B2C  50DF               	movf	indf2,w,c
  3319   000B2E  6E8C               	movwf	140,c	;volatile
  3320   000B30                     
  3321                           ;Display.c: 43:             estado = 0;
  3322   000B30  0E00               	movlw	0
  3323   000B32  6E3F               	movwf	mux_display@estado^0,c
  3324                           
  3325                           ;Display.c: 44:             break;
  3326   000B34  EFB9  F005         	goto	i2l377
  3327   000B38                     i2l1534:
  3328   000B38  503F               	movf	mux_display@estado^0,w,c
  3329   000B3A  6E4E               	movwf	??_mux_display^0,c
  3330   000B3C  6A4F               	clrf	(??_mux_display+1)^0,c
  3331                           
  3332                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3333                           ; Switch size 1, requested type "simple"
  3334                           ; Number of cases is 1, Range of values is 0 to 0
  3335                           ; switch strategies available:
  3336                           ; Name         Instructions Cycles
  3337                           ; simple_byte            4     3 (average)
  3338                           ;	Chosen strategy is simple_byte
  3339   000B3E  504F               	movf	(??_mux_display+1)^0,w,c
  3340   000B40  0A00               	xorlw	0	; case 0
  3341   000B42  B4D8               	btfsc	status,2,c
  3342   000B44  EFA6  F005         	goto	i2l2170
  3343   000B48  EFB9  F005         	goto	i2l377
  3344   000B4C                     i2l2170:
  3345                           
  3346                           ; Switch size 1, requested type "simple"
  3347                           ; Number of cases is 4, Range of values is 0 to 3
  3348                           ; switch strategies available:
  3349                           ; Name         Instructions Cycles
  3350                           ; simple_byte           13     7 (average)
  3351                           ;	Chosen strategy is simple_byte
  3352   000B4C  504E               	movf	??_mux_display^0,w,c
  3353   000B4E  0A00               	xorlw	0	; case 0
  3354   000B50  B4D8               	btfsc	status,2,c
  3355   000B52  EF64  F005         	goto	i2l372
  3356   000B56  0A01               	xorlw	1	; case 1
  3357   000B58  B4D8               	btfsc	status,2,c
  3358   000B5A  EF72  F005         	goto	i2l374
  3359   000B5E  0A03               	xorlw	3	; case 2
  3360   000B60  B4D8               	btfsc	status,2,c
  3361   000B62  EF80  F005         	goto	i2l375
  3362   000B66  0A01               	xorlw	1	; case 3
  3363   000B68  B4D8               	btfsc	status,2,c
  3364   000B6A  EF8E  F005         	goto	i2l376
  3365   000B6E  EFB9  F005         	goto	i2l377
  3366   000B72                     i2l377:
  3367   000B72  0012               	return		;funcret
  3368   000B74                     __end_of_mux_display:
  3369                           	callstack 0
  3370                           
  3371 ;; *************** function _Read_AD *****************
  3372 ;; Defined at:
  3373 ;;		line 217 in file "main.c"
  3374 ;; Parameters:    Size  Location     Type
  3375 ;;		None
  3376 ;; Auto vars:     Size  Location     Type
  3377 ;;  data            2   14[COMRAM] unsigned short 
  3378 ;; Return value:  Size  Location     Type
  3379 ;;                  1    wreg      void 
  3380 ;; Registers used:
  3381 ;;		wreg, status,2, status,0, cstack
  3382 ;; Tracked objects:
  3383 ;;		On entry : 0/0
  3384 ;;		On exit  : 0/0
  3385 ;;		Unchanged: 0/0
  3386 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3387 ;;      Params:         0       0       0       0       0       0       0
  3388 ;;      Locals:         2       0       0       0       0       0       0
  3389 ;;      Temps:          2       0       0       0       0       0       0
  3390 ;;      Totals:         4       0       0       0       0       0       0
  3391 ;;Total ram usage:        4 bytes
  3392 ;; Hardware stack levels used: 1
  3393 ;; Hardware stack levels required when called: 1
  3394 ;; This function calls:
  3395 ;;		___lwdiv
  3396 ;;		___lwmod
  3397 ;;		_f_pwm
  3398 ;; This function is called by:
  3399 ;;		_f_timers
  3400 ;; This function uses a non-reentrant model
  3401 ;;
  3402                           
  3403                           	psect	text29
  3404   0008CE                     __ptext29:
  3405                           	callstack 0
  3406   0008CE                     _Read_AD:
  3407                           	callstack 23
  3408   0008CE                     
  3409                           ;main.c: 219:     uint16_t data = AD_data[0];
  3410   0008CE  C03C  F05C         	movff	_AD_data,Read_AD@data
  3411   0008D2  6A5D               	clrf	(Read_AD@data+1)^0,c
  3412   0008D4                     
  3413                           ;main.c: 221:     if(duty_AD)
  3414   0008D4  5049               	movf	_duty_AD^0,w,c
  3415   0008D6  B4D8               	btfsc	status,2,c
  3416   0008D8  EF70  F004         	goto	i2u61_41
  3417   0008DC  EF72  F004         	goto	i2u61_40
  3418   0008E0                     i2u61_41:
  3419   0008E0  EFF2  F004         	goto	i2l234
  3420   0008E4                     i2u61_40:
  3421   0008E4                     
  3422                           ;main.c: 222:     {;main.c: 223:         f_pwm(data<<2);
  3423   0008E4  C05C  F05A         	movff	Read_AD@data,??_Read_AD
  3424   0008E8  C05D  F05B         	movff	Read_AD@data+1,??_Read_AD+1
  3425   0008EC  90D8               	bcf	status,0,c
  3426   0008EE  365A               	rlcf	??_Read_AD^0,f,c
  3427   0008F0  365B               	rlcf	(??_Read_AD+1)^0,f,c
  3428   0008F2  90D8               	bcf	status,0,c
  3429   0008F4  365A               	rlcf	??_Read_AD^0,f,c
  3430   0008F6  365B               	rlcf	(??_Read_AD+1)^0,f,c
  3431   0008F8  C05A  F04E         	movff	??_Read_AD,f_pwm@duty
  3432   0008FC  C05B  F04F         	movff	??_Read_AD+1,f_pwm@duty+1
  3433   000900  EC85  F008         	call	_f_pwm	;wreg free
  3434                           
  3435                           ;main.c: 224:         duty_LCD1 = '0' + (data<<2)/1000;
  3436   000904  C05C  F05A         	movff	Read_AD@data,??_Read_AD
  3437   000908  C05D  F05B         	movff	Read_AD@data+1,??_Read_AD+1
  3438   00090C  90D8               	bcf	status,0,c
  3439   00090E  365A               	rlcf	??_Read_AD^0,f,c
  3440   000910  365B               	rlcf	(??_Read_AD+1)^0,f,c
  3441   000912  90D8               	bcf	status,0,c
  3442   000914  365A               	rlcf	??_Read_AD^0,f,c
  3443   000916  365B               	rlcf	(??_Read_AD+1)^0,f,c
  3444   000918  C05A  F053         	movff	??_Read_AD,___lwdiv@dividend
  3445   00091C  C05B  F054         	movff	??_Read_AD+1,___lwdiv@dividend+1
  3446   000920  0E03               	movlw	3
  3447   000922  6E56               	movwf	(___lwdiv@divisor+1)^0,c
  3448   000924  0EE8               	movlw	232
  3449   000926  6E55               	movwf	___lwdiv@divisor^0,c
  3450   000928  ECAB  F006         	call	___lwdiv	;wreg free
  3451   00092C  5053               	movf	?___lwdiv^0,w,c
  3452   00092E  0F30               	addlw	48
  3453   000930  6E31               	movwf	_duty_LCD1^0,c
  3454                           
  3455                           ;main.c: 225:         duty_LCD2 = '0' + ((data<<2)%1000)/100;
  3456   000932  0E03               	movlw	3
  3457   000934  6E51               	movwf	(___lwmod@divisor+1)^0,c
  3458   000936  0EE8               	movlw	232
  3459   000938  6E50               	movwf	___lwmod@divisor^0,c
  3460   00093A  C05C  F05A         	movff	Read_AD@data,??_Read_AD
  3461   00093E  C05D  F05B         	movff	Read_AD@data+1,??_Read_AD+1
  3462   000942  90D8               	bcf	status,0,c
  3463   000944  365A               	rlcf	??_Read_AD^0,f,c
  3464   000946  365B               	rlcf	(??_Read_AD+1)^0,f,c
  3465   000948  90D8               	bcf	status,0,c
  3466   00094A  365A               	rlcf	??_Read_AD^0,f,c
  3467   00094C  365B               	rlcf	(??_Read_AD+1)^0,f,c
  3468   00094E  C05A  F04E         	movff	??_Read_AD,___lwmod@dividend
  3469   000952  C05B  F04F         	movff	??_Read_AD+1,___lwmod@dividend+1
  3470   000956  EC52  F007         	call	___lwmod	;wreg free
  3471   00095A  C04E  F053         	movff	?___lwmod,___lwdiv@dividend
  3472   00095E  C04F  F054         	movff	?___lwmod+1,___lwdiv@dividend+1
  3473   000962  0E00               	movlw	0
  3474   000964  6E56               	movwf	(___lwdiv@divisor+1)^0,c
  3475   000966  0E64               	movlw	100
  3476   000968  6E55               	movwf	___lwdiv@divisor^0,c
  3477   00096A  ECAB  F006         	call	___lwdiv	;wreg free
  3478   00096E  5053               	movf	?___lwdiv^0,w,c
  3479   000970  0F30               	addlw	48
  3480   000972  6E30               	movwf	_duty_LCD2^0,c
  3481                           
  3482                           ;main.c: 226:         duty_LCD3 = '0' + ((data<<2)%100)/10;
  3483   000974  0E00               	movlw	0
  3484   000976  6E51               	movwf	(___lwmod@divisor+1)^0,c
  3485   000978  0E64               	movlw	100
  3486   00097A  6E50               	movwf	___lwmod@divisor^0,c
  3487   00097C  C05C  F05A         	movff	Read_AD@data,??_Read_AD
  3488   000980  C05D  F05B         	movff	Read_AD@data+1,??_Read_AD+1
  3489   000984  90D8               	bcf	status,0,c
  3490   000986  365A               	rlcf	??_Read_AD^0,f,c
  3491   000988  365B               	rlcf	(??_Read_AD+1)^0,f,c
  3492   00098A  90D8               	bcf	status,0,c
  3493   00098C  365A               	rlcf	??_Read_AD^0,f,c
  3494   00098E  365B               	rlcf	(??_Read_AD+1)^0,f,c
  3495   000990  C05A  F04E         	movff	??_Read_AD,___lwmod@dividend
  3496   000994  C05B  F04F         	movff	??_Read_AD+1,___lwmod@dividend+1
  3497   000998  EC52  F007         	call	___lwmod	;wreg free
  3498   00099C  C04E  F053         	movff	?___lwmod,___lwdiv@dividend
  3499   0009A0  C04F  F054         	movff	?___lwmod+1,___lwdiv@dividend+1
  3500   0009A4  0E00               	movlw	0
  3501   0009A6  6E56               	movwf	(___lwdiv@divisor+1)^0,c
  3502   0009A8  0E0A               	movlw	10
  3503   0009AA  6E55               	movwf	___lwdiv@divisor^0,c
  3504   0009AC  ECAB  F006         	call	___lwdiv	;wreg free
  3505   0009B0  5053               	movf	?___lwdiv^0,w,c
  3506   0009B2  0F30               	addlw	48
  3507   0009B4  6E2F               	movwf	_duty_LCD3^0,c
  3508                           
  3509                           ;main.c: 227:         duty_LCD4 = '0' + (data<<2)%10;
  3510   0009B6  C05C  F05A         	movff	Read_AD@data,??_Read_AD
  3511   0009BA  C05D  F05B         	movff	Read_AD@data+1,??_Read_AD+1
  3512   0009BE  90D8               	bcf	status,0,c
  3513   0009C0  365A               	rlcf	??_Read_AD^0,f,c
  3514   0009C2  365B               	rlcf	(??_Read_AD+1)^0,f,c
  3515   0009C4  90D8               	bcf	status,0,c
  3516   0009C6  365A               	rlcf	??_Read_AD^0,f,c
  3517   0009C8  365B               	rlcf	(??_Read_AD+1)^0,f,c
  3518   0009CA  C05A  F04E         	movff	??_Read_AD,___lwmod@dividend
  3519   0009CE  C05B  F04F         	movff	??_Read_AD+1,___lwmod@dividend+1
  3520   0009D2  0E00               	movlw	0
  3521   0009D4  6E51               	movwf	(___lwmod@divisor+1)^0,c
  3522   0009D6  0E0A               	movlw	10
  3523   0009D8  6E50               	movwf	___lwmod@divisor^0,c
  3524   0009DA  EC52  F007         	call	___lwmod	;wreg free
  3525   0009DE  504E               	movf	?___lwmod^0,w,c
  3526   0009E0  0F30               	addlw	48
  3527   0009E2  6E2E               	movwf	_duty_LCD4^0,c
  3528   0009E4                     i2l234:
  3529   0009E4  0012               	return		;funcret
  3530   0009E6                     __end_of_Read_AD:
  3531                           	callstack 0
  3532                           
  3533 ;; *************** function _f_pwm *****************
  3534 ;; Defined at:
  3535 ;;		line 37 in file "main.c"
  3536 ;; Parameters:    Size  Location     Type
  3537 ;;  duty            2    0[COMRAM] unsigned short 
  3538 ;; Auto vars:     Size  Location     Type
  3539 ;;		None
  3540 ;; Return value:  Size  Location     Type
  3541 ;;                  1    wreg      void 
  3542 ;; Registers used:
  3543 ;;		wreg, status,2, status,0
  3544 ;; Tracked objects:
  3545 ;;		On entry : 0/0
  3546 ;;		On exit  : 0/0
  3547 ;;		Unchanged: 0/0
  3548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3549 ;;      Params:         2       0       0       0       0       0       0
  3550 ;;      Locals:         0       0       0       0       0       0       0
  3551 ;;      Temps:          2       0       0       0       0       0       0
  3552 ;;      Totals:         4       0       0       0       0       0       0
  3553 ;;Total ram usage:        4 bytes
  3554 ;; Hardware stack levels used: 1
  3555 ;; This function calls:
  3556 ;;		Nothing
  3557 ;; This function is called by:
  3558 ;;		_f_int0
  3559 ;;		_f_int2
  3560 ;;		_Read_AD
  3561 ;; This function uses a non-reentrant model
  3562 ;;
  3563                           
  3564                           	psect	text30
  3565   00110A                     __ptext30:
  3566                           	callstack 0
  3567   00110A                     _f_pwm:
  3568                           	callstack 22
  3569   00110A                     
  3570                           ;main.c: 37: void f_pwm(uint16_t duty);main.c: 38: {;main.c: 39:     CCP1CON &= 0b110011
      +                          11;
  3571   00110A  0ECF               	movlw	207
  3572   00110C  16BD               	andwf	189,f,c	;volatile
  3573                           
  3574                           ;main.c: 40:     CCP1CON |= ((duty & 0b11) << 4);
  3575   00110E  C04E  F050         	movff	f_pwm@duty,??_f_pwm	;volatile
  3576   001112  0E03               	movlw	3
  3577   001114  1650               	andwf	??_f_pwm^0,f,c
  3578   001116  3850               	swapf	??_f_pwm^0,w,c
  3579   001118  0BF0               	andlw	240
  3580   00111A  12BD               	iorwf	189,f,c	;volatile
  3581                           
  3582                           ;main.c: 41:     CCPR1L = duty >> 2;
  3583   00111C  C04E  F050         	movff	f_pwm@duty,??_f_pwm
  3584   001120  C04F  F051         	movff	f_pwm@duty+1,??_f_pwm+1
  3585   001124  90D8               	bcf	status,0,c
  3586   001126  3251               	rrcf	(??_f_pwm+1)^0,f,c
  3587   001128  3250               	rrcf	??_f_pwm^0,f,c
  3588   00112A  90D8               	bcf	status,0,c
  3589   00112C  3251               	rrcf	(??_f_pwm+1)^0,f,c
  3590   00112E  3250               	rrcf	??_f_pwm^0,f,c
  3591   001130  5050               	movf	??_f_pwm^0,w,c
  3592   001132  6EBE               	movwf	190,c	;volatile
  3593   001134  0012               	return		;funcret
  3594   001136                     __end_of_f_pwm:
  3595                           	callstack 0
  3596                           
  3597 ;; *************** function ___lwmod *****************
  3598 ;; Defined at:
  3599 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\lwmod.c"
  3600 ;; Parameters:    Size  Location     Type
  3601 ;;  dividend        2    0[COMRAM] unsigned int 
  3602 ;;  divisor         2    2[COMRAM] unsigned int 
  3603 ;; Auto vars:     Size  Location     Type
  3604 ;;  counter         1    4[COMRAM] unsigned char 
  3605 ;; Return value:  Size  Location     Type
  3606 ;;                  2    0[COMRAM] unsigned int 
  3607 ;; Registers used:
  3608 ;;		wreg, status,2, status,0
  3609 ;; Tracked objects:
  3610 ;;		On entry : 0/0
  3611 ;;		On exit  : 0/0
  3612 ;;		Unchanged: 0/0
  3613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3614 ;;      Params:         4       0       0       0       0       0       0
  3615 ;;      Locals:         1       0       0       0       0       0       0
  3616 ;;      Temps:          0       0       0       0       0       0       0
  3617 ;;      Totals:         5       0       0       0       0       0       0
  3618 ;;Total ram usage:        5 bytes
  3619 ;; Hardware stack levels used: 1
  3620 ;; This function calls:
  3621 ;;		Nothing
  3622 ;; This function is called by:
  3623 ;;		_Read_AD
  3624 ;; This function uses a non-reentrant model
  3625 ;;
  3626                           
  3627                           	psect	text31
  3628   000EA4                     __ptext31:
  3629                           	callstack 0
  3630   000EA4                     ___lwmod:
  3631                           	callstack 23
  3632   000EA4  5050               	movf	___lwmod@divisor^0,w,c
  3633   000EA6  1051               	iorwf	(___lwmod@divisor+1)^0,w,c
  3634   000EA8  B4D8               	btfsc	status,2,c
  3635   000EAA  EF59  F007         	goto	i2u50_41
  3636   000EAE  EF5B  F007         	goto	i2u50_40
  3637   000EB2                     i2u50_41:
  3638   000EB2  EF7F  F007         	goto	i2l942
  3639   000EB6                     i2u50_40:
  3640   000EB6  0E01               	movlw	1
  3641   000EB8  6E52               	movwf	___lwmod@counter^0,c
  3642   000EBA  EF63  F007         	goto	i2l1776
  3643   000EBE                     i2l1774:
  3644   000EBE  90D8               	bcf	status,0,c
  3645   000EC0  3650               	rlcf	___lwmod@divisor^0,f,c
  3646   000EC2  3651               	rlcf	(___lwmod@divisor+1)^0,f,c
  3647   000EC4  2A52               	incf	___lwmod@counter^0,f,c
  3648   000EC6                     i2l1776:
  3649   000EC6  AE51               	btfss	(___lwmod@divisor+1)^0,7,c
  3650   000EC8  EF68  F007         	goto	i2u51_41
  3651   000ECC  EF6A  F007         	goto	i2u51_40
  3652   000ED0                     i2u51_41:
  3653   000ED0  EF5F  F007         	goto	i2l1774
  3654   000ED4                     i2u51_40:
  3655   000ED4                     i2l1778:
  3656   000ED4  5050               	movf	___lwmod@divisor^0,w,c
  3657   000ED6  5C4E               	subwf	___lwmod@dividend^0,w,c
  3658   000ED8  5051               	movf	(___lwmod@divisor+1)^0,w,c
  3659   000EDA  584F               	subwfb	(___lwmod@dividend+1)^0,w,c
  3660   000EDC  A0D8               	btfss	status,0,c
  3661   000EDE  EF73  F007         	goto	i2u52_41
  3662   000EE2  EF75  F007         	goto	i2u52_40
  3663   000EE6                     i2u52_41:
  3664   000EE6  EF79  F007         	goto	i2l1782
  3665   000EEA                     i2u52_40:
  3666   000EEA  5050               	movf	___lwmod@divisor^0,w,c
  3667   000EEC  5E4E               	subwf	___lwmod@dividend^0,f,c
  3668   000EEE  5051               	movf	(___lwmod@divisor+1)^0,w,c
  3669   000EF0  5A4F               	subwfb	(___lwmod@dividend+1)^0,f,c
  3670   000EF2                     i2l1782:
  3671   000EF2  90D8               	bcf	status,0,c
  3672   000EF4  3251               	rrcf	(___lwmod@divisor+1)^0,f,c
  3673   000EF6  3250               	rrcf	___lwmod@divisor^0,f,c
  3674   000EF8  2E52               	decfsz	___lwmod@counter^0,f,c
  3675   000EFA  EF6A  F007         	goto	i2l1778
  3676   000EFE                     i2l942:
  3677   000EFE  C04E  F04E         	movff	___lwmod@dividend,?___lwmod
  3678   000F02  C04F  F04F         	movff	___lwmod@dividend+1,?___lwmod+1
  3679   000F06  0012               	return		;funcret
  3680   000F08                     __end_of___lwmod:
  3681                           	callstack 0
  3682                           
  3683 ;; *************** function ___lwdiv *****************
  3684 ;; Defined at:
  3685 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\lwdiv.c"
  3686 ;; Parameters:    Size  Location     Type
  3687 ;;  dividend        2    5[COMRAM] unsigned int 
  3688 ;;  divisor         2    7[COMRAM] unsigned int 
  3689 ;; Auto vars:     Size  Location     Type
  3690 ;;  quotient        2    9[COMRAM] unsigned int 
  3691 ;;  counter         1   11[COMRAM] unsigned char 
  3692 ;; Return value:  Size  Location     Type
  3693 ;;                  2    5[COMRAM] unsigned int 
  3694 ;; Registers used:
  3695 ;;		wreg, status,2, status,0
  3696 ;; Tracked objects:
  3697 ;;		On entry : 0/0
  3698 ;;		On exit  : 0/0
  3699 ;;		Unchanged: 0/0
  3700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3701 ;;      Params:         4       0       0       0       0       0       0
  3702 ;;      Locals:         3       0       0       0       0       0       0
  3703 ;;      Temps:          0       0       0       0       0       0       0
  3704 ;;      Totals:         7       0       0       0       0       0       0
  3705 ;;Total ram usage:        7 bytes
  3706 ;; Hardware stack levels used: 1
  3707 ;; This function calls:
  3708 ;;		Nothing
  3709 ;; This function is called by:
  3710 ;;		_Read_AD
  3711 ;; This function uses a non-reentrant model
  3712 ;;
  3713                           
  3714                           	psect	text32
  3715   000D56                     __ptext32:
  3716                           	callstack 0
  3717   000D56                     ___lwdiv:
  3718                           	callstack 23
  3719   000D56  0E00               	movlw	0
  3720   000D58  6E58               	movwf	(___lwdiv@quotient+1)^0,c
  3721   000D5A  0E00               	movlw	0
  3722   000D5C  6E57               	movwf	___lwdiv@quotient^0,c
  3723   000D5E  5055               	movf	___lwdiv@divisor^0,w,c
  3724   000D60  1056               	iorwf	(___lwdiv@divisor+1)^0,w,c
  3725   000D62  B4D8               	btfsc	status,2,c
  3726   000D64  EFB6  F006         	goto	i2u47_41
  3727   000D68  EFB8  F006         	goto	i2u47_40
  3728   000D6C                     i2u47_41:
  3729   000D6C  EFE0  F006         	goto	i2l932
  3730   000D70                     i2u47_40:
  3731   000D70  0E01               	movlw	1
  3732   000D72  6E59               	movwf	___lwdiv@counter^0,c
  3733   000D74  EFC0  F006         	goto	i2l1756
  3734   000D78                     i2l1754:
  3735   000D78  90D8               	bcf	status,0,c
  3736   000D7A  3655               	rlcf	___lwdiv@divisor^0,f,c
  3737   000D7C  3656               	rlcf	(___lwdiv@divisor+1)^0,f,c
  3738   000D7E  2A59               	incf	___lwdiv@counter^0,f,c
  3739   000D80                     i2l1756:
  3740   000D80  AE56               	btfss	(___lwdiv@divisor+1)^0,7,c
  3741   000D82  EFC5  F006         	goto	i2u48_41
  3742   000D86  EFC7  F006         	goto	i2u48_40
  3743   000D8A                     i2u48_41:
  3744   000D8A  EFBC  F006         	goto	i2l1754
  3745   000D8E                     i2u48_40:
  3746   000D8E                     i2l1758:
  3747   000D8E  90D8               	bcf	status,0,c
  3748   000D90  3657               	rlcf	___lwdiv@quotient^0,f,c
  3749   000D92  3658               	rlcf	(___lwdiv@quotient+1)^0,f,c
  3750   000D94  5055               	movf	___lwdiv@divisor^0,w,c
  3751   000D96  5C53               	subwf	___lwdiv@dividend^0,w,c
  3752   000D98  5056               	movf	(___lwdiv@divisor+1)^0,w,c
  3753   000D9A  5854               	subwfb	(___lwdiv@dividend+1)^0,w,c
  3754   000D9C  A0D8               	btfss	status,0,c
  3755   000D9E  EFD3  F006         	goto	i2u49_41
  3756   000DA2  EFD5  F006         	goto	i2u49_40
  3757   000DA6                     i2u49_41:
  3758   000DA6  EFDA  F006         	goto	i2l1766
  3759   000DAA                     i2u49_40:
  3760   000DAA  5055               	movf	___lwdiv@divisor^0,w,c
  3761   000DAC  5E53               	subwf	___lwdiv@dividend^0,f,c
  3762   000DAE  5056               	movf	(___lwdiv@divisor+1)^0,w,c
  3763   000DB0  5A54               	subwfb	(___lwdiv@dividend+1)^0,f,c
  3764   000DB2  8057               	bsf	___lwdiv@quotient^0,0,c
  3765   000DB4                     i2l1766:
  3766   000DB4  90D8               	bcf	status,0,c
  3767   000DB6  3256               	rrcf	(___lwdiv@divisor+1)^0,f,c
  3768   000DB8  3255               	rrcf	___lwdiv@divisor^0,f,c
  3769   000DBA  2E59               	decfsz	___lwdiv@counter^0,f,c
  3770   000DBC  EFC7  F006         	goto	i2l1758
  3771   000DC0                     i2l932:
  3772   000DC0  C057  F053         	movff	___lwdiv@quotient,?___lwdiv
  3773   000DC4  C058  F054         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3774   000DC8  0012               	return		;funcret
  3775   000DCA                     __end_of___lwdiv:
  3776                           	callstack 0
  3777                           
  3778 ;; *************** function _ADC_maq *****************
  3779 ;; Defined at:
  3780 ;;		line 32 in file "ADC.c"
  3781 ;; Parameters:    Size  Location     Type
  3782 ;;		None
  3783 ;; Auto vars:     Size  Location     Type
  3784 ;;		None
  3785 ;; Return value:  Size  Location     Type
  3786 ;;                  1    wreg      void 
  3787 ;; Registers used:
  3788 ;;		wreg, status,2, status,0, cstack
  3789 ;; Tracked objects:
  3790 ;;		On entry : 0/0
  3791 ;;		On exit  : 0/0
  3792 ;;		Unchanged: 0/0
  3793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3794 ;;      Params:         0       0       0       0       0       0       0
  3795 ;;      Locals:         0       0       0       0       0       0       0
  3796 ;;      Temps:          2       0       0       0       0       0       0
  3797 ;;      Totals:         2       0       0       0       0       0       0
  3798 ;;Total ram usage:        2 bytes
  3799 ;; Hardware stack levels used: 1
  3800 ;; Hardware stack levels required when called: 1
  3801 ;; This function calls:
  3802 ;;		_select_channel
  3803 ;;		i2_start_AD_conversion
  3804 ;; This function is called by:
  3805 ;;		_f_interrupt_high
  3806 ;; This function uses a non-reentrant model
  3807 ;;
  3808                           
  3809                           	psect	text33
  3810   000F08                     __ptext33:
  3811                           	callstack 0
  3812   000F08                     _ADC_maq:
  3813                           	callstack 24
  3814   000F08                     
  3815                           ;ADC.c: 34:     static uint8_t estado = 0;;ADC.c: 36:     switch (estado)
  3816   000F08  EF9C  F007         	goto	i2l1634
  3817   000F0C                     i2l404:
  3818                           
  3819                           ;ADC.c: 39:             AD_data[0] = ADRESH;
  3820   000F0C  CFC4 F03C          	movff	4036,_AD_data	;volatile
  3821   000F10                     
  3822                           ;ADC.c: 40:             select_channel(1);
  3823   000F10  0E01               	movlw	1
  3824   000F12  EC2C  F009         	call	_select_channel
  3825   000F16                     
  3826                           ;ADC.c: 41:             start_AD_conversion();
  3827   000F16  EC4A  F009         	call	i2_start_AD_conversion	;wreg free
  3828   000F1A                     
  3829                           ;ADC.c: 42:             estado = 1;
  3830   000F1A  0E01               	movlw	1
  3831   000F1C  6E3E               	movwf	ADC_maq@estado^0,c
  3832                           
  3833                           ;ADC.c: 43:             break;
  3834   000F1E  EFB1  F007         	goto	i2l407
  3835   000F22                     i2l406:
  3836                           
  3837                           ;ADC.c: 46:             AD_data[1] = ADRESH;
  3838   000F22  CFC4 F03D          	movff	4036,_AD_data+1	;volatile
  3839   000F26                     
  3840                           ;ADC.c: 48:             select_channel(0);
  3841   000F26  0E00               	movlw	0
  3842   000F28  EC2C  F009         	call	_select_channel
  3843   000F2C                     
  3844                           ;ADC.c: 49:             start_AD_conversion();
  3845   000F2C  EC4A  F009         	call	i2_start_AD_conversion	;wreg free
  3846   000F30                     
  3847                           ;ADC.c: 50:             estado = 0;
  3848   000F30  0E00               	movlw	0
  3849   000F32  6E3E               	movwf	ADC_maq@estado^0,c
  3850                           
  3851                           ;ADC.c: 51:             break;
  3852   000F34  EFB1  F007         	goto	i2l407
  3853   000F38                     i2l1634:
  3854   000F38  503E               	movf	ADC_maq@estado^0,w,c
  3855   000F3A  6E4F               	movwf	??_ADC_maq^0,c
  3856   000F3C  6A50               	clrf	(??_ADC_maq+1)^0,c
  3857                           
  3858                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3859                           ; Switch size 1, requested type "simple"
  3860                           ; Number of cases is 1, Range of values is 0 to 0
  3861                           ; switch strategies available:
  3862                           ; Name         Instructions Cycles
  3863                           ; simple_byte            4     3 (average)
  3864                           ;	Chosen strategy is simple_byte
  3865   000F3E  5050               	movf	(??_ADC_maq+1)^0,w,c
  3866   000F40  0A00               	xorlw	0	; case 0
  3867   000F42  B4D8               	btfsc	status,2,c
  3868   000F44  EFA6  F007         	goto	i2l2172
  3869   000F48  EFB1  F007         	goto	i2l407
  3870   000F4C                     i2l2172:
  3871                           
  3872                           ; Switch size 1, requested type "simple"
  3873                           ; Number of cases is 2, Range of values is 0 to 1
  3874                           ; switch strategies available:
  3875                           ; Name         Instructions Cycles
  3876                           ; simple_byte            7     4 (average)
  3877                           ;	Chosen strategy is simple_byte
  3878   000F4C  504F               	movf	??_ADC_maq^0,w,c
  3879   000F4E  0A00               	xorlw	0	; case 0
  3880   000F50  B4D8               	btfsc	status,2,c
  3881   000F52  EF86  F007         	goto	i2l404
  3882   000F56  0A01               	xorlw	1	; case 1
  3883   000F58  B4D8               	btfsc	status,2,c
  3884   000F5A  EF91  F007         	goto	i2l406
  3885   000F5E  EFB1  F007         	goto	i2l407
  3886   000F62                     i2l407:
  3887   000F62  0012               	return		;funcret
  3888   000F64                     __end_of_ADC_maq:
  3889                           	callstack 0
  3890                           
  3891 ;; *************** function i2_start_AD_conversion *****************
  3892 ;; Defined at:
  3893 ;;		line 19 in file "ADC.c"
  3894 ;; Parameters:    Size  Location     Type
  3895 ;;		None
  3896 ;; Auto vars:     Size  Location     Type
  3897 ;;		None
  3898 ;; Return value:  Size  Location     Type
  3899 ;;                  1    wreg      void 
  3900 ;; Registers used:
  3901 ;;		None
  3902 ;; Tracked objects:
  3903 ;;		On entry : 0/0
  3904 ;;		On exit  : 0/0
  3905 ;;		Unchanged: 0/0
  3906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3907 ;;      Params:         0       0       0       0       0       0       0
  3908 ;;      Locals:         0       0       0       0       0       0       0
  3909 ;;      Temps:          0       0       0       0       0       0       0
  3910 ;;      Totals:         0       0       0       0       0       0       0
  3911 ;;Total ram usage:        0 bytes
  3912 ;; Hardware stack levels used: 1
  3913 ;; This function calls:
  3914 ;;		Nothing
  3915 ;; This function is called by:
  3916 ;;		_ADC_maq
  3917 ;; This function uses a non-reentrant model
  3918 ;;
  3919                           
  3920                           	psect	text34
  3921   001294                     __ptext34:
  3922                           	callstack 0
  3923   001294                     i2_start_AD_conversion:
  3924                           	callstack 24
  3925   001294                     
  3926                           ;ADC.c: 21:     GO = 1;
  3927   001294  82C2               	bsf	4034,1,c	;volatile
  3928   001296  0012               	return		;funcret
  3929   001298                     __end_ofi2_start_AD_conversion:
  3930                           	callstack 0
  3931                           
  3932 ;; *************** function _select_channel *****************
  3933 ;; Defined at:
  3934 ;;		line 24 in file "ADC.c"
  3935 ;; Parameters:    Size  Location     Type
  3936 ;;  channel         1    wreg     unsigned char 
  3937 ;; Auto vars:     Size  Location     Type
  3938 ;;  channel         1    0[COMRAM] unsigned char 
  3939 ;; Return value:  Size  Location     Type
  3940 ;;                  1    wreg      void 
  3941 ;; Registers used:
  3942 ;;		wreg, status,2, status,0
  3943 ;; Tracked objects:
  3944 ;;		On entry : 0/0
  3945 ;;		On exit  : 0/0
  3946 ;;		Unchanged: 0/0
  3947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3948 ;;      Params:         0       0       0       0       0       0       0
  3949 ;;      Locals:         1       0       0       0       0       0       0
  3950 ;;      Temps:          0       0       0       0       0       0       0
  3951 ;;      Totals:         1       0       0       0       0       0       0
  3952 ;;Total ram usage:        1 bytes
  3953 ;; Hardware stack levels used: 1
  3954 ;; This function calls:
  3955 ;;		Nothing
  3956 ;; This function is called by:
  3957 ;;		_ADC_maq
  3958 ;; This function uses a non-reentrant model
  3959 ;;
  3960                           
  3961                           	psect	text35
  3962   001258                     __ptext35:
  3963                           	callstack 0
  3964   001258                     _select_channel:
  3965                           	callstack 24
  3966                           
  3967                           ;incstack = 0
  3968                           ;select_channel@channel stored from wreg
  3969   001258  6E4E               	movwf	select_channel@channel^0,c
  3970   00125A                     
  3971                           ;ADC.c: 24: void select_channel(uint8_t channel);ADC.c: 25: {;ADC.c: 29:     ADCON0 = 0b
      +                          00000001 | (channel << 2);
  3972   00125A  444E               	rlncf	select_channel@channel^0,w,c
  3973   00125C  46E8               	rlncf	wreg,f,c
  3974   00125E  0BFC               	andlw	252
  3975   001260  0901               	iorlw	1
  3976   001262  6EC2               	movwf	194,c	;volatile
  3977   001264  0012               	return		;funcret
  3978   001266                     __end_of_select_channel:
  3979                           	callstack 0
  3980                           
  3981                           	psect	rparam
  3982   000000                     
  3983                           	psect	temp
  3984   00006A                     btemp:
  3985                           	callstack 0
  3986   00006A                     	ds	1
  3987   000000                     int$flags	set	btemp
  3988   000000                     wtemp8	set	btemp+1
  3989   000000                     ttemp5	set	btemp+1
  3990   000000                     ttemp6	set	btemp+4
  3991   000000                     ttemp7	set	btemp+8
  3992                           
  3993                           	psect	idloc
  3994                           
  3995                           ;Config register IDLOC0 @ 0x200000
  3996                           ;	unspecified, using default values
  3997   200000                     	org	2097152
  3998   200000  FF                 	db	255
  3999                           
  4000                           ;Config register IDLOC1 @ 0x200001
  4001                           ;	unspecified, using default values
  4002   200001                     	org	2097153
  4003   200001  FF                 	db	255
  4004                           
  4005                           ;Config register IDLOC2 @ 0x200002
  4006                           ;	unspecified, using default values
  4007   200002                     	org	2097154
  4008   200002  FF                 	db	255
  4009                           
  4010                           ;Config register IDLOC3 @ 0x200003
  4011                           ;	unspecified, using default values
  4012   200003                     	org	2097155
  4013   200003  FF                 	db	255
  4014                           
  4015                           ;Config register IDLOC4 @ 0x200004
  4016                           ;	unspecified, using default values
  4017   200004                     	org	2097156
  4018   200004  FF                 	db	255
  4019                           
  4020                           ;Config register IDLOC5 @ 0x200005
  4021                           ;	unspecified, using default values
  4022   200005                     	org	2097157
  4023   200005  FF                 	db	255
  4024                           
  4025                           ;Config register IDLOC6 @ 0x200006
  4026                           ;	unspecified, using default values
  4027   200006                     	org	2097158
  4028   200006  FF                 	db	255
  4029                           
  4030                           ;Config register IDLOC7 @ 0x200007
  4031                           ;	unspecified, using default values
  4032   200007                     	org	2097159
  4033   200007  FF                 	db	255
  4034                           
  4035                           	psect	config
  4036                           
  4037                           ; Padding undefined space
  4038   300000                     	org	3145728
  4039   300000  FF                 	db	255
  4040                           
  4041                           ;Config register CONFIG1H @ 0x300001
  4042                           ;	Oscillator Selection bits
  4043                           ;	OSC = HS, HS oscillator
  4044                           ;	Fail-Safe Clock Monitor Enable bit
  4045                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  4046                           ;	Internal/External Oscillator Switchover bit
  4047                           ;	IESO = OFF, Oscillator Switchover mode disabled
  4048   300001                     	org	3145729
  4049   300001  02                 	db	2
  4050                           
  4051                           ;Config register CONFIG2L @ 0x300002
  4052                           ;	Power-up Timer Enable bit
  4053                           ;	PWRT = OFF, PWRT disabled
  4054                           ;	Brown-out Reset Enable bits
  4055                           ;	BOREN = SBORDIS, Brown-out Reset enabled in hardware only (SBOREN is disabled)
  4056                           ;	Brown Out Reset Voltage bits
  4057                           ;	BORV = 3, Minimum setting
  4058   300002                     	org	3145730
  4059   300002  1F                 	db	31
  4060                           
  4061                           ;Config register CONFIG2H @ 0x300003
  4062                           ;	Watchdog Timer Enable bit
  4063                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  4064                           ;	Watchdog Timer Postscale Select bits
  4065                           ;	WDTPS = 32768, 1:32768
  4066   300003                     	org	3145731
  4067   300003  1E                 	db	30
  4068                           
  4069                           ; Padding undefined space
  4070   300004                     	org	3145732
  4071   300004  FF                 	db	255
  4072                           
  4073                           ;Config register CONFIG3H @ 0x300005
  4074                           ;	CCP2 MUX bit
  4075                           ;	CCP2MX = PORTC, CCP2 input/output is multiplexed with RC1
  4076                           ;	PORTB A/D Enable bit
  4077                           ;	PBADEN = ON, PORTB<4:0> pins are configured as analog input channels on Reset
  4078                           ;	Low-Power Timer1 Oscillator Enable bit
  4079                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  4080                           ;	MCLR Pin Enable bit
  4081                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  4082   300005                     	org	3145733
  4083   300005  83                 	db	131
  4084                           
  4085                           ;Config register CONFIG4L @ 0x300006
  4086                           ;	Stack Full/Underflow Reset Enable bit
  4087                           ;	STVREN = ON, Stack full/underflow will cause Reset
  4088                           ;	Single-Supply ICSP Enable bit
  4089                           ;	LVP = OFF, Single-Supply ICSP disabled
  4090                           ;	Extended Instruction Set Enable bit
  4091                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  4092                           ;	Background Debugger Enable bit
  4093                           ;	DEBUG = 0x1, unprogrammed default
  4094   300006                     	org	3145734
  4095   300006  81                 	db	129
  4096                           
  4097                           ; Padding undefined space
  4098   300007                     	org	3145735
  4099   300007  FF                 	db	255
  4100                           
  4101                           ;Config register CONFIG5L @ 0x300008
  4102                           ;	Code Protection bit
  4103                           ;	CP0 = OFF, Block 0 (000800-001FFFh) not code-protected
  4104                           ;	Code Protection bit
  4105                           ;	CP1 = OFF, Block 1 (002000-003FFFh) not code-protected
  4106                           ;	Code Protection bit
  4107                           ;	CP2 = OFF, Block 2 (004000-005FFFh) not code-protected
  4108                           ;	Code Protection bit
  4109                           ;	CP3 = OFF, Block 3 (006000-007FFFh) not code-protected
  4110   300008                     	org	3145736
  4111   300008  0F                 	db	15
  4112                           
  4113                           ;Config register CONFIG5H @ 0x300009
  4114                           ;	Boot Block Code Protection bit
  4115                           ;	CPB = OFF, Boot block (000000-0007FFh) not code-protected
  4116                           ;	Data EEPROM Code Protection bit
  4117                           ;	CPD = OFF, Data EEPROM not code-protected
  4118   300009                     	org	3145737
  4119   300009  C0                 	db	192
  4120                           
  4121                           ;Config register CONFIG6L @ 0x30000A
  4122                           ;	Write Protection bit
  4123                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) not write-protected
  4124                           ;	Write Protection bit
  4125                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) not write-protected
  4126                           ;	Write Protection bit
  4127                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) not write-protected
  4128                           ;	Write Protection bit
  4129                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) not write-protected
  4130   30000A                     	org	3145738
  4131   30000A  0F                 	db	15
  4132                           
  4133                           ;Config register CONFIG6H @ 0x30000B
  4134                           ;	Configuration Register Write Protection bit
  4135                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  4136                           ;	Boot Block Write Protection bit
  4137                           ;	WRTB = OFF, Boot block (000000-0007FFh) not write-protected
  4138                           ;	Data EEPROM Write Protection bit
  4139                           ;	WRTD = OFF, Data EEPROM not write-protected
  4140   30000B                     	org	3145739
  4141   30000B  E0                 	db	224
  4142                           
  4143                           ;Config register CONFIG7L @ 0x30000C
  4144                           ;	Table Read Protection bit
  4145                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) not protected from table reads executed in other
      +                           blocks
  4146                           ;	Table Read Protection bit
  4147                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) not protected from table reads executed in other
      +                           blocks
  4148                           ;	Table Read Protection bit
  4149                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) not protected from table reads executed in other
      +                           blocks
  4150                           ;	Table Read Protection bit
  4151                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) not protected from table reads executed in other
      +                           blocks
  4152   30000C                     	org	3145740
  4153   30000C  0F                 	db	15
  4154                           
  4155                           ;Config register CONFIG7H @ 0x30000D
  4156                           ;	Boot Block Table Read Protection bit
  4157                           ;	EBTRB = OFF, Boot block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
  4158   30000D                     	org	3145741
  4159   30000D  40                 	db	64
  4160                           tosu	equ	0xFFF
  4161                           tosh	equ	0xFFE
  4162                           tosl	equ	0xFFD
  4163                           stkptr	equ	0xFFC
  4164                           pclatu	equ	0xFFB
  4165                           pclath	equ	0xFFA
  4166                           pcl	equ	0xFF9
  4167                           tblptru	equ	0xFF8
  4168                           tblptrh	equ	0xFF7
  4169                           tblptrl	equ	0xFF6
  4170                           tablat	equ	0xFF5
  4171                           prodh	equ	0xFF4
  4172                           prodl	equ	0xFF3
  4173                           indf0	equ	0xFEF
  4174                           postinc0	equ	0xFEE
  4175                           postdec0	equ	0xFED
  4176                           preinc0	equ	0xFEC
  4177                           plusw0	equ	0xFEB
  4178                           fsr0h	equ	0xFEA
  4179                           fsr0l	equ	0xFE9
  4180                           wreg	equ	0xFE8
  4181                           indf1	equ	0xFE7
  4182                           postinc1	equ	0xFE6
  4183                           postdec1	equ	0xFE5
  4184                           preinc1	equ	0xFE4
  4185                           plusw1	equ	0xFE3
  4186                           fsr1h	equ	0xFE2
  4187                           fsr1l	equ	0xFE1
  4188                           bsr	equ	0xFE0
  4189                           indf2	equ	0xFDF
  4190                           postinc2	equ	0xFDE
  4191                           postdec2	equ	0xFDD
  4192                           preinc2	equ	0xFDC
  4193                           plusw2	equ	0xFDB
  4194                           fsr2h	equ	0xFDA
  4195                           fsr2l	equ	0xFD9
  4196                           status	equ	0xFD8

Data Sizes:
    Strings     19
    Constant    0
    Data        66
    BSS         28
    Persistent  4
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     24     105
    BANK0           128      7      24
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    lcd_str@str	PTR const unsigned char  size(2) Largest target is 14
		 -> STR_3(CODE[5]), STR_2(CODE[5]), STR_1(CODE[14]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _f_interrupt_high in COMRAM

    _f_timers->_Read_AD
    _f_timers->_read_keyb
    _show_to_LCD->i2_lcd_str
    i2_lcd_str->i2_lcd_dat
    i2_lcd_dat->i2_lcd_wr
    i2_lcd_cmd->i2_lcd_wr
    _read_keyboard->_ler_teclado
    _read_keyb->_f_int2
    _f_int2->___wmul
    _f_int0->_f_pwm
    _Read_AD->___lwdiv
    ___lwdiv->___lwmod
    _ADC_maq->_select_channel

Critical Paths under _main in BANK0

    _setup->_lcd_str
    _lcd_str->_lcd_dat
    _lcd_dat->_lcd_wr
    _lcd_init->_lcd_cmd
    _lcd_cmd->_lcd_wr

Critical Paths under _f_interrupt_high in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _f_interrupt_high in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _f_interrupt_high in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _f_interrupt_high in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _f_interrupt_high in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _f_interrupt_high in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     497
                               _loop
                              _setup
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0     497
                            _AD_init
                 _disable_interrupts
                  _enable_interrupts
                     _interrupt_init
                            _lcd_cmd
                           _lcd_init
                            _lcd_str
                           _setup_io
                _start_AD_conversion
 ---------------------------------------------------------------------------------
 (2) _start_AD_conversion                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _setup_io                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _lcd_str                                              5     3      2     409
                                              2 BANK0      5     3      2
                            _lcd_dat
 ---------------------------------------------------------------------------------
 (3) _lcd_dat                                              1     1      0      44
                                              1 BANK0      1     1      0
                             _lcd_wr
 ---------------------------------------------------------------------------------
 (2) _lcd_init                                             1     1      0      44
                                              2 BANK0      1     1      0
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (3) _lcd_cmd                                              1     1      0      44
                                              1 BANK0      1     1      0
                             _lcd_wr
 ---------------------------------------------------------------------------------
 (4) _lcd_wr                                               1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _interrupt_init                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _enable_interrupts                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _disable_interrupts                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _AD_init                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _loop                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _f_interrupt_high                                     8     8      0    3528
                                             16 COMRAM     8     8      0
                            _ADC_maq
                           _f_timers
 ---------------------------------------------------------------------------------
 (6) _f_timers                                             0     0      0    3513
                            _Read_AD
                        _mux_display
                          _read_keyb
                      _read_keyboard
                        _show_to_LCD
 ---------------------------------------------------------------------------------
 (7) _show_to_LCD                                          0     0      0     248
                          i2_lcd_cmd
                          i2_lcd_dat
                          i2_lcd_str
 ---------------------------------------------------------------------------------
 (8) i2_lcd_str                                            5     3      2     160
                                              2 COMRAM     5     3      2
                          i2_lcd_dat
 ---------------------------------------------------------------------------------
 (9) i2_lcd_dat                                            1     1      0      44
                                              1 COMRAM     1     1      0
                           i2_lcd_wr
 ---------------------------------------------------------------------------------
 (8) i2_lcd_cmd                                            1     1      0      44
                                              1 COMRAM     1     1      0
                           i2_lcd_wr
 ---------------------------------------------------------------------------------
 (10) i2_lcd_wr                                            1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (7) _read_keyboard                                        2     2      0     285
                                              8 COMRAM     2     2      0
                        _ler_teclado
 ---------------------------------------------------------------------------------
 (8) _ler_teclado                                          8     8      0     285
                                              0 COMRAM     8     8      0
 ---------------------------------------------------------------------------------
 (7) _read_keyb                                            4     4      0    1364
                                             12 COMRAM     4     4      0
                             _f_int0
                             _f_int1
                             _f_int2
 ---------------------------------------------------------------------------------
 (8) _f_int2                                               6     6      0     887
                                              6 COMRAM     6     6      0
                             ___wmul
                              _f_pwm
 ---------------------------------------------------------------------------------
 (9) ___wmul                                               6     2      4     615
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (8) _f_int1                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _f_int0                                               0     0      0     272
                              _f_pwm
 ---------------------------------------------------------------------------------
 (7) _mux_display                                          2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (7) _Read_AD                                              4     4      0    1616
                                             12 COMRAM     4     4      0
                            ___lwdiv
                            ___lwmod
                              _f_pwm
 ---------------------------------------------------------------------------------
 (9) _f_pwm                                                4     2      2     272
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (8) ___lwmod                                              5     1      4     615
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (8) ___lwdiv                                              7     3      4     618
                                              5 COMRAM     7     3      4
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (6) _ADC_maq                                              2     2      0      15
                                              1 COMRAM     2     2      0
                     _select_channel
              i2_start_AD_conversion
 ---------------------------------------------------------------------------------
 (7) i2_start_AD_conversion                                0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _select_channel                                       1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _loop
   _setup
     _AD_init
     _disable_interrupts
     _enable_interrupts
     _interrupt_init
     _lcd_cmd
       _lcd_wr
     _lcd_init
       _lcd_cmd
     _lcd_str
       _lcd_dat
         _lcd_wr
     _setup_io
     _start_AD_conversion

 _f_interrupt_high (ROOT)
   _ADC_maq
     _select_channel
     i2_start_AD_conversion
   _f_timers
     _Read_AD
       ___lwdiv
         ___lwmod (ARG)
       ___lwmod
       _f_pwm
     _mux_display
     _read_keyb
       _f_int0
         _f_pwm
       _f_int1
       _f_int2
         ___wmul
         _f_pwm
     _read_keyboard
       _ler_teclado
     _show_to_LCD
       i2_lcd_cmd
         i2_lcd_wr
       i2_lcd_dat
         i2_lcd_wr
       i2_lcd_str
         i2_lcd_dat

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      31        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      7      18       5       18.8%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     18      69       1       83.3%
BITBIGSFRhllhhh     1E      0       0      23        0.0%
BITBIGSFRhhlhl      18      0       0      17        0.0%
BITBIGSFRhhh         D      0       0      16        0.0%
BITBIGSFRhllhhl      6      0       0      24        0.0%
BITBIGSFRhlhhh       5      0       0      20        0.0%
BITBIGSFRhllhlh      5      0       0      25        0.0%
BITBIGSFRhhllh       4      0       0      18        0.0%
BITBIGSFRhhlll       4      0       0      19        0.0%
BITBIGSFRhlll        4      0       0      27        0.0%
BITBIGSFRhlhhl       1      0       0      21        0.0%
BITBIGSFRlh          1      0       0      28        0.0%
BITBIGSFRhllhll      1      0       0      26        0.0%
BITBIGSFRhlhl        1      0       0      22        0.0%
BITBIGSFRll          1      0       0      29        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      81      30        0.0%
DATA                 0      0      81       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Wed Nov 23 17:54:43 2022

                            _i 0048                             l13 126E                             l22 0EA2  
                           l16 1180                             l19 115A                             l28 1010  
                           _GO 007E11                             l99 0E3A            ___wmul@multiplicand 0050  
             f_timers@counter0 0029               f_timers@counter1 0027               f_timers@counter2 0025  
             f_timers@counter3 0023         __end_of_interrupt_init 1228                            l102 11C8  
                          l320 1278                            l323 1226                            l317 1280  
                          l184 1298                            l392 1256                            l395 1292  
                          _GIE 007F97                            _PR2 000FCB                            u750 1010  
                          u807 0E72                            u751 100C                            u817 116E  
                          u827 1178                            u767 1148                            u777 1152  
                          u787 0E48                            u797 0E62                            prod 000FF3  
                          wreg 000FE8                __end_of_ADC_maq 0F64                  ADC_maq@estado 003E  
              __end_of_AD_init 1258                           l2000 1176                           l2002 117E  
                         l2010 1146                           l2020 0E40                           l2012 114E  
                         l2004 113A                           l2100 0E28                           l2030 0E78  
                         l2022 0E52                           l2014 1150                           l2006 113C  
                         l2102 0E36                           l2040 0E96                           l2032 0E7E  
                         l2024 0E54                           l2016 1158                           l2008 1144  
                         l2104 123A                           l2042 0E9C                           l2034 0E84  
                         l2026 0E5A                           l2018 0E3C                           l2050 0FE8  
                         l2106 123E                           l2052 127A                           l2036 0E8A  
                         l2028 0E70                           l2044 0FBE                           l2060 1290  
                         l2062 1270                           l2038 0E90                           l2046 0FC8  
                         l2054 11A8                           l2070 0DD6                           l2056 120E  
                         l2048 0FE4                           l2080 0DE6                           l2072 0DDA  
                         l2064 0DCA                           l2058 124A                           l2090 0E08  
                         l2082 0DE8                           l2074 0DDC                           l2066 0DCE  
                         l2092 0E0C                           l2084 0DEA                           l2076 0DE0  
                         l2068 0DD2                           l2094 0E10                           l2086 0DFC  
                         l2078 0DE4                           l2096 0E14                           l2088 0E04  
                         l2098 0E22                           l1990 1160                           l1992 1162  
                         l1994 116A                           l1988 126A                           l1996 116C  
                         l1998 1174                           _ADIE 007CEE                           _ADIF 007CF6  
                         STR_1 0601                           STR_2 060F                           STR_3 060F  
                         _LATA 000F89                           _LATB 000F8A                           _LATD 000F8C  
                         _IPEN 007E87                           _PEIE 007F96                           i2l13 1288  
                         i2l16 120C                           i2l19 11EA                           i2l28 1060  
                         _TMR0 000FD6                           _main 123A                           _loop 1298  
                         fsr2h 000FDA                           indf2 000FDF                           fsr1l 000FE1  
        i2_start_AD_conversion 1294                           fsr2l 000FD9                           btemp 006A  
        f_int2@duty_normalized 003A                           prodh 000FF4                           prodl 000FF3  
                         start 000E                   ___param_bank 000000                __end_of_Read_AD 09E6  
                 ?_ler_teclado 004E                    Read_AD@data 005C                     i2lcd_str@i 0054  
                        ?_main 004E                          ?_loop 004E                ?_interrupt_init 004E  
                        _T0CON 000FD5                          _T2CON 000FCA                          _LATA2 007C4A  
                        _LATA3 007C4B                          _LATA4 007C4C                          _LATA5 007C4D  
              __end_of___lwdiv 0DCA                __end_of___lwmod 0F08                          i2l202 0CC2  
                        i2l212 07CC                          i2l205 1108                          i2l222 10AA  
                        i2l230 0D54                          i2l214 0802                          i2l310 0A42  
                        i2l215 0828                          i2l311 0A60                          i2l216 084E  
                        i2l312 0A7E                          i2l225 128E                          i2l234 09E4  
                        i2l314 0AA0                          i2l219 08CC                          i2l404 0F0C  
                        i2l420 0632                          i2l181 1134                          i2l421 0654  
                        i2l406 0F22                          i2l342 0C20                          i2l407 0F62  
                        i2l432 0726                          i2l441 11A6                          i2l433 0748  
                        i2l426 06AC                          i2l427 06CE                          i2l372 0AC8  
                        i2l374 0AE4                          i2l438 079C                          i2l375 0B00  
                        i2l376 0B1C                          i2l377 0B72                          i2l395 1296  
                        i2l398 1264                          i2l932 0DC0                          i2l942 0EFE  
                        i2l939 0DC8                          i2l949 0F06                          _PORTB 000F81  
                        _PORTD 000F83                          _TRISA 000F92                          _TRISB 000F93  
                        _TRISC 000F94                          _TRISD 000F95                          _TRISE 000F96  
              __end_of_lcd_dat 115C                __end_of_lcd_cmd 1182                __end_of_lcd_str 1012  
                        _dado1 0047                          _dado2 0046                          _dado3 0045  
                        _dado4 0044                          _f_pwm 110A             _disable_interrupts 127A  
                        _setup 0DCA                          tablat 000FF5                          ttemp5 006B  
                        ttemp6 006E                          ttemp7 0072                          status 000FD8  
                        wtemp8 006B               __end_ofi2_lcd_wr 128A            ?_disable_interrupts 004E  
             _f_interrupt_high 0008                __initialization 0F64                   __end_of_main 124A  
                 __end_of_loop 129A               ler_teclado@i_380 0052               ler_teclado@i_379 0050  
             ler_teclado@saida 0054                      ??_ADC_maq 004F              read_keyb@dado_RB3 005A  
            read_keyb@dado_RB4 005B              read_keyb@dado_RB5 005C                         ??_main 0098  
                       ??_loop 0091                  __activetblptr 000002           ??_disable_interrupts 0091  
                    ??_AD_init 0091                    i2lcd_wr@val 004E                         ?_f_pwm 004E  
                       _ADCON0 000FC2                         _ADCON1 000FC1                         _ADCON2 000FC0  
                       _ADRESH 000FC4                         _CCPR1L 000FBE                         ?_setup 004E  
                       _INT0IE 007F94                         _INT0IF 007F91                         _INT1IE 007F83  
                       _INT1IF 007F80                         _INT2IE 007F84                         _INT2IF 007F81  
                       i2l1210 0616                         i2l1220 0634                         i2l1212 0622  
                       i2l1230 067C                         i2l1222 0638                         i2l1214 0626  
                       i2l1240 06A4                         i2l1232 068A                         i2l1224 0666  
                       i2l1250 06E4                         i2l1234 068E                         i2l1226 066A  
                       i2l1260 0716                         i2l1252 06F2                         i2l1244 06AE  
                       i2l1236 069C                         i2l1228 0678                         i2l1500 08C6  
                       i2l1270 072C                         i2l1262 071A                         i2l1254 06F6  
                       i2l1246 06B2                         i2l1238 06A0                         i2l1502 08C8  
                       i2l1520 0AE8                         i2l1280 077E                         i2l1272 075A  
                       i2l1264 071E                         i2l1256 0704                         i2l1248 06E0  
                       i2l2170 0B4C                         i2l1530 0B30                         i2l1522 0AF8  
                       i2l1514 0AC4                         i2l1194 128A                         i2l1282 0782  
                       i2l1274 075E                         i2l1258 0708                         i2l1540 125A  
                       i2l2172 0F4C                         i2l1620 0F10                         i2l1524 0B04  
                       i2l1516 0ACC                         i2l1284 0790                         i2l1276 076C  
                       i2l1268 0728                         i2l1460 07FA                         i2l1452 07D0  
                       i2l1444 079E                         i2l1700 11D6                         i2l1542 1294  
                       i2l1630 0F30                         i2l1622 0F16                         i2l1526 0B14  
                       i2l1518 0ADC                         i2l1534 0B38                         i2l1710 1072  
                       i2l1286 0794                         i2l1278 0770                         i2l1462 0806  
                       i2l1454 07EE                         i2l1446 07A4                         i2l1702 11DE  
                       i2l1624 0F1A                         i2l1528 0B20                         i2l1720 108E  
                       i2l1712 107E                         i2l2168 0888                         i2l1472 082C  
                       i2l1456 07F2                         i2l1448 07B6                         i2l1704 11E0  
                       i2l1800 1012                         i2l1626 0F26                         i2l1634 0F38  
                       i2l1618 0F08                         i2l1730 10A2                         i2l1722 1092  
                       i2l1714 1082                         i2l1482 0852                         i2l1458 07F6  
                       i2l1706 11E8                         i2l1802 101A                         i2l1628 0F2C  
                       i2l1732 10A6                         i2l1724 1096                         i2l1716 1086  
                       i2l1708 1062                         i2l1740 0D36                         i2l1820 0C3C  
                       i2l1804 1036                         i2l1750 0D5E                         i2l1726 109A  
                       i2l1718 108A                         i2l1742 0D3C                         i2l1734 0CC4  
                       i2l1830 0C68                         i2l1822 0C40                         i2l1494 0874  
                       i2l1806 1038                         i2l1910 0B74                         i2l1760 0D94  
                       i2l1752 0D70                         i2l1728 109E                         i2l1744 0D42  
                       i2l1736 0CC8                         i2l1840 0C9C                         i2l1832 0C70  
                       i2l1824 0C4E                         i2l1816 0C22                         i2l1496 08AE  
                       i2l1920 0BB4                         i2l1912 0B8A                         i2l1762 0DAA  
                       i2l1754 0D78                         i2l1770 0EA4                         i2l1690 119E  
                       i2l1746 0D48                         i2l1738 0D30                         i2l1850 0CBE  
                       i2l1842 0CA0                         i2l1834 0C74                         i2l1826 0C56  
                       i2l1818 0C34                         i2l1498 08BE                         i2l1930 0BE6  
                       i2l1922 0BBC                         i2l1914 0B92                         i2l1764 0DB2  
                       i2l1756 0D80                         i2l1748 0D56                         i2l1780 0EEA  
                       i2l1772 0EB6                         i2l1844 0CB2                         i2l1836 0C86  
                       i2l1828 0C5A                         i2l1684 1284                         i2l1860 10FC  
                       i2l1852 10DE                         i2l1940 0C14                         i2l1932 0BEE  
                       i2l1924 0BC0                         i2l1916 0B96                         i2l1766 0DB4  
                       i2l1758 0D8E                         i2l1782 0EF2                         i2l1774 0EBE  
                       i2l1686 110A                         i2l1846 0CB6                         i2l1838 0C8A  
                       i2l1790 11F6                         i2l1694 11CC                         i2l1862 1102  
                       i2l1854 10E4                         i2l1942 0C18                         i2l1934 0C04  
                       i2l1926 0BC8                         i2l1918 0B9E                         i2l1950 0A16  
                       i2l1768 0DBA                         i2l1784 0EF8                         i2l1776 0EC6  
                       i2l1864 08CE                         i2l1688 1182                         i2l1848 0CBA  
                       i2l1792 11F8                         i2l1696 11CE                         i2l1856 10F0  
                       i2l1936 0C0C                         i2l1928 0BDE                         i2l1960 0A40  
                       i2l1952 0A1E                         i2l1778 0ED4                         i2l1866 08D4  
                       i2l1794 1200                         i2l1786 11EE                         i2l1698 11D4  
                       i2l1858 10F6                         i2l1938 0C10                         i2l1970 0A8C  
                       i2l1962 0A50                         i2l1954 0A22                         i2l1868 08E4  
                       i2l1796 1202                         i2l1788 11F0                         i2l1972 0A9A  
                       i2l1964 0A5E                         i2l1956 0A24                         i2l1948 0A08  
                       i2l1798 120A                         i2l1974 0A9E                         i2l1966 0A6E  
                       i2l1958 0A32                         i2l1968 0A7C                         _INTCON 000FF2  
       ?i2_start_AD_conversion 004E                         _TMR0IE 007F95                         _TMR0IF 007F92  
                       i2u1_40 0654                         i2u1_41 0650                         i2u2_40 0666  
                       i2u2_41 0662                         i2u3_40 0678                         i2u3_41 0674  
                       i2u4_40 068A                         i2u4_41 0686                         i2u5_40 069C  
                       i2u5_41 0698                         i2u6_40 06CE                         i2u6_41 06CA  
                       i2u7_40 06E0                         i2u7_41 06DC                         i2u8_40 06F2  
                       i2u8_41 06EE                         i2u9_40 0704                         i2u9_41 0700  
                    ??_Read_AD 005A               __end_of_f_timers 0C22               __end_of_lcd_init 0EA4  
                       ___wmul 1182                         _f_int0 1062                         _f_int1 128A  
                       _f_int2 0CC4                      ??___lwdiv 0057                      ??___lwmod 0052  
                       _lcd_wr 1266                         _linha1 0012                         _linha2 0080  
                       clear_0 0FAA                         isa$std 000001                      ??_lcd_dat 0092  
                    ??_lcd_cmd 0092                      ??_lcd_str 0095                   __pdataCOMRAM 0001  
           _estado_sequencia01 0041             _estado_sequencia02 0040                   __mediumconst 0000  
                       tblptrh 000FF7                         tblptrl 000FF6               __end_of_setup_io 11CA  
                       tblptru 000FF8              __end_ofi2_lcd_dat 11EC              __end_ofi2_lcd_cmd 120E  
            __end_ofi2_lcd_str 1062                   ?_show_to_LCD 004E                   ?_mux_display 004E  
                   __accesstop 0080        __end_of__initialization 0FB0                 _select_channel 1258  
          _start_AD_conversion 1290                  ___rparam_used 000001                 __pcstackCOMRAM 004E  
                 __pidataBANK0 1228                  __end_of_f_pwm 1136                  __end_of_setup 0E3C  
         ?_start_AD_conversion 004E                      ?i2_lcd_wr 004E                   i2lcd_dat@val 004F  
                 i2lcd_cmd@val 004F                        ??_f_pwm 0050                        ??_setup 0098  
       __end_of_select_channel 1266                     __pnvCOMRAM 0066                   i2lcd_str@str 0050  
                      ?___wmul 004E               ??_interrupt_init 0091                        ?_f_int0 004E  
                      ?_f_int1 004E                        ?_f_int2 004E                        ?_lcd_wr 004E  
                      _CCP1CON 000FBD                  _read_keyboard 079E                        _ADC_maq 0F08  
        ??_start_AD_conversion 0091              read_keyboard@dado 0042                        _AD_data 003C  
                      _AD_init 124A                     ??i2_lcd_wr 004E                        _INTCON2 000FF1  
                      _INTCON3 000FF0                        i2u10_40 0716                        i2u10_41 0712  
                      i2u11_40 0748                        i2u11_41 0744       __end_of_f_interrupt_high 0AC4  
                      i2u12_40 075A                        i2u12_41 0756                        i2u13_40 076C  
                      i2u13_41 0768                        i2u14_40 077E                        i2u30_40 07B6  
                      i2u14_41 077A                        i2u30_41 07B2                        i2u15_40 0790  
                      i2u31_40 07C8                        i2u15_41 078C                        i2u31_41 07C4  
                      i2u32_40 08BE                        i2u32_41 08BA                        i2u50_40 0EB6  
                      i2u50_41 0EB2                        i2u51_40 0ED4                        i2u51_41 0ED0  
                      i2u52_40 0EEA                        i2u60_40 0CB2                        i2u52_41 0EE6  
                      i2u60_41 0CAE                        i2u61_40 08E4                        i2u53_40 1060  
                      i2u61_41 08E0                        i2u53_41 105C                        i2u62_40 0B8A  
                      i2u70_40 0A5E                        i2u62_41 0B86                        i2u70_41 0A5A  
                      i2u47_40 0D70                        i2u55_40 0C34                        i2u63_40 0BB4  
                      i2u71_40 0A6E                        i2u47_41 0D6C                        i2u55_41 0C30  
                      i2u63_41 0BB0                        i2u71_41 0A6A                        i2u48_40 0D8E  
                      i2u56_40 0C4E                        i2u64_40 0BDE                        i2u72_40 0A7C  
                      i2u48_41 0D8A                        i2u56_41 0C4A                        i2u64_41 0BDA  
                      i2u72_41 0A78                        i2u49_40 0DAA                        i2u57_40 0C68  
                      i2u65_40 0C04                        i2u73_40 0A8C                        i2u49_41 0DA6  
                      i2u57_41 0C64                        i2u65_41 0C00                        i2u73_41 0A88  
                      i2u58_40 0C86                        i2u74_40 0A9A                        i2u66_40 0A16  
                      i2u58_41 0C82                        i2u74_41 0A96                        i2u66_41 0A12  
                      i2u59_40 0C9C                        i2u67_40 0A32                        i2u59_41 0C98  
                      i2u67_41 0A2E                        i2u83_47 11D8                        i2u68_40 0A40  
                      i2u68_41 0A3C                      ?_f_timers 004E                        i2u84_47 11E2  
                      i2u69_40 0A50                        i2u69_41 0A4C                        i2u85_47 11FA  
                      i2u86_47 1204                      ?_lcd_init 004E                ?_select_channel 004E  
                 ler_teclado@i 004E                        _Read_AD 08CE                        __Hparam 0000  
                      __Lparam 0000                      ?_setup_io 004E                 ?_read_keyboard 004E  
                      ___lwdiv 0D56                        ___lwmod 0EA4                   __psmallconst 0600  
                      __pcinit 0F64                        __ramtop 0600                        __ptext0 123A  
                      __ptext1 0DCA                        __ptext2 1290                        __ptext3 11A8  
                      __ptext4 0FBE                        __ptext5 1136                        __ptext6 0E3C  
                      __ptext7 115C                        __ptext8 1266                        __ptext9 120E  
                      _lcd_dat 1136                        _lcd_cmd 115C                        _lcd_str 0FBE  
                      _duty_AD 0049              __end_of_read_keyb 0CC4                     ??_f_timers 005E  
      ??i2_start_AD_conversion 004E                     ??_lcd_init 0093                 __pintcode_body 09E6  
         end_of_initialization 0FB0                  __Lmediumconst 0000                        int_func 09E6  
                      postdec1 000FE5                        postdec2 000FDD                     ??_setup_io 0091  
                      postinc0 000FEE                        postinc2 000FDE                      _PORTEbits 000F84  
                   lcd_dat@val 0092                     lcd_cmd@val 0092                      i2_lcd_dat 11CA  
                    i2_lcd_cmd 11EC                      i2_lcd_str 1012                     lcd_str@str 0093  
              ??_read_keyboard 0056                 __end_of___wmul 11A8                 __end_of_f_int0 10AC  
               __end_of_f_int1 1290                 __end_of_f_int2 0D56                  __pidataCOMRAM 10AC  
               __end_of_lcd_wr 1270              _enable_interrupts 1270          select_channel@channel 004E  
           ?_enable_interrupts 004E            start_initialization 0F64            ??_enable_interrupts 0091  
                   ?i2_lcd_dat 004E                     ?i2_lcd_cmd 004E                     ?i2_lcd_str 0050  
           ler_teclado@entrada 0055                       ??___wmul 0052                       ??_f_int0 0052  
                     ??_f_int1 004E                       ??_f_int2 0054                  ??_ler_teclado 004E  
                     ??_lcd_wr 0091                    __pdataBANK0 0080      __end_of_enable_interrupts 127A  
                     ?_ADC_maq 004E                       ?_AD_init 004E                    __pbssCOMRAM 0032  
             ??_select_channel 004E                  __pcstackBANK0 0091              ?_f_interrupt_high 004E  
           ??_f_interrupt_high 005E                       ?_Read_AD 004E               ___lwdiv@dividend 0053  
                    __pintcode 0008    __end_of_start_AD_conversion 1294            read_keyb@m_dado_RB3 002D  
          read_keyb@m_dado_RB4 002C            read_keyb@m_dado_RB5 002B                       ?___lwdiv 0053  
                     ?___lwmod 004E                   _memoria_dado 0043                       ?_lcd_dat 004E  
                     ?_lcd_cmd 004E                       ?_lcd_str 0093                    __smallconst 0600  
          __end_of_ler_teclado 079E               ___lwdiv@quotient 0057                      _duty_LCD1 0031  
                    _duty_LCD2 0030                      _duty_LCD3 002F                      _duty_LCD4 002E  
                    _read_keyb 0C22  __end_ofi2_start_AD_conversion 1298                    ??i2_lcd_dat 004F  
                  ??i2_lcd_cmd 004F                 ___wmul@product 0052                    ??i2_lcd_str 0052  
                 _duty_teclado 0032                      f_pwm@duty 004E              ___wmul@multiplier 004E  
                     i2_lcd_wr 1282                      lcd_wr@val 0091                     ?_read_keyb 004E  
                    copy_data0 0F78                      copy_data1 0F98                  ??_show_to_LCD 0055  
                ??_mux_display 004E                       __Hrparam 0000                       __Lrparam 0000  
                  _ler_teclado 0616     __end_of_disable_interrupts 1282                ___lwdiv@divisor 0055  
                     _f_timers 0B74                ___lwdiv@counter 0059                       __ptext10 1270  
                     __ptext11 127A                       __ptext20 1282                       __ptext12 124A  
                     __ptext21 079E                       __ptext13 1298                       __ptext30 110A  
                     __ptext22 0616                       __ptext31 0EA4                       __ptext23 0C22  
                     __ptext15 0B74                       __ptext32 0D56                       __ptext24 0CC4  
                     __ptext16 10DE                       __ptext33 0F08                       __ptext25 1182  
                     __ptext17 1012                       __ptext34 1294                       __ptext26 128A  
                     __ptext18 11CA                       __ptext35 1258                       __ptext27 1062  
                     __ptext19 11EC                       __ptext28 0AC4                       __ptext29 08CE  
                     _conv7seg 0001                       _lcd_init 0E3C                       _display1 004D  
                     _display2 004C                       _display3 004B                       _display4 004A  
            mux_display@estado 003F            __end_of_show_to_LCD 110A            __end_of_mux_display 0B74  
                     isa$xinst 000000                  _temporizador1 0068                  _temporizador2 0066  
                     _setup_io 11A8                       int$flags 006A          __end_of_read_keyboard 08CE  
                     lcd_str@i 0097                    ??_read_keyb 005A                       intlevel2 0000  
             ___lwmod@dividend 004E                  read_keyb@dado 005D                ___lwmod@divisor 0050  
               _interrupt_init 120E                ___lwmod@counter 0052                    _show_to_LCD 10DE  
                  _mux_display 0AC4  
